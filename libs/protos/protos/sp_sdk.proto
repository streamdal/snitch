syntax = "proto3";

package protos;

import "sp_common.proto";
import "sp_pipeline.proto";

option go_package = "github.com/streamdal/streamdal/libs/protos/build/go/protos";

enum ExecStatus {
  // Unset status. This should never be returned by the SDK. If it does, it is
  // probably a bug (and you should file an issue)
  EXEC_STATUS_UNSET = 0;

  // Indicates that the step execution evaluated to "true"
  EXEC_STATUS_TRUE = 1;

  // Indicates that the step execution evaluated to "false"
  EXEC_STATUS_FALSE = 2;

  // Indicates that the SDK encountered an error while trying to process the
  // request. Example error cases: SDK can't find the appropriate Wasm module,
  // Wasm function cannot alloc or dealloc memory, etc.
  EXEC_STATUS_ERROR = 3;
}

// Common return response used by all SDKs
message SDKResponse {
  // Contains (potentially) modified input data
  bytes data = 1;

  // Execution status of the last step
  ExecStatus status = 2;

  // Optional message accompanying the exec status for the last step
  optional string status_message = 3;

  // An array of pipelines that the SDK executed and the status of each step
  repeated PipelineStatus pipeline_status = 4;

  // Includes any metadata that the step(s) may want to pass back to the user.
  //
  // NOTE: Metadata is aggregated across all steps in the pipeline, so if two
  // steps both set a key "foo" to different values, the value of "foo" in the
  // response will be the value set by the last step in the pipeline.
  //
  // To learn more about "metadata", see SDK Spec V2 doc "Pipeline Step & Error
  // Behavior" section.
  map<string, string> metadata = 5;
}

message PipelineStatus {
  // ID of the pipeline
  string id = 1;

  // The name of the pipeline
  string name = 2;

  // The status of each step in the pipeline
  repeated StepStatus step_status = 3;
}

message StepStatus {
  // The name of the step
  string name = 1;

  // Execution outcome status of the step
  ExecStatus status = 2;

  // Optional message accompanying the exec status
  optional string status_message = 3;

  // Indicates if current or all future pipelines were aborted.
  //
  // IMPORTANT: The SDK running into an error does not automatically abort
  // current or all future pipelines - the user must define the abort conditions
  // for "on_error".
  AbortCondition abort_condition = 4;
}

// SDKStartupConfig is the configuration structure that is used in Streamdal SDKs
// to configure the client at startup. Some SDKs may expose additional config
// options aside from these baseline options.
message SDKStartupConfig {
  // URL for the Streamdal server gRPC API. Example: "streamdal-server-address:8082"
  string url = 1;

  // Auth token used to authenticate with the Streamdal server (NOTE: should be
  // the same as the token used for running the Streamdal server).
  string token = 2;

  // Service name used for identifying the SDK client in the Streamdal server and console
  string service_name = 3;

  // How long to wait for a pipeline execution to complete before timing out
  optional int32 pipeline_timeout_seconds = 4;

  // How long to wait for a step execution to complete before timing out
  optional int32 step_timeout_seconds = 5;

  // Tells the SDK how to behave when it runs into an error. This setting has
  // no effect if the SDK is NOT used within a shim/wrapper library. Read more
  // about shims here: https://docs.streamdal.com/en/core-components/libraries-shims/
  optional SDKErrorMode error_mode = 6;
}

// SDKErrorMode is used to alter the error behavior of a shim library
// instrumented with the Streamdal SDK at runtime.
//
// NOTE: This structure is usually used when the SDK is used via a shim/wrapper
// library where you have less control over SDK behavior. Read more about shims
// here: https://docs.streamdal.com/en/core-components/libraries-shims/
//
// protolint:disable ENUM_FIELD_NAMES_PREFIX
enum SDKErrorMode {
  // This instructs the shim to IGNORE any non-recoverable errors that the SDK
  // might run into. If the SDK runs into an error, the shim will NOT pass the
  // error back to the user - it will instead return the whatever the upstream
  // library would normally return to the user.
  //
  // *** This is the default behavior ***
  //
  // Example with Redis Shim
  // ------------------------
  // Under normal conditions, a Redis shim would work in the following way when
  // user is performing a read operation:
  //
  // 1. The shim would call the upstream Redis library to perform the read operation
  // 2. Upstream library returns results to the shim
  // 3. Shim passes the result to the integrated Streamdal SDK for processing
  // 4. SDK returns (potentially) modified data to the shim
  // 5. Shim returns the modified data to the user
  //
  // This setting tells the shim that IF it runs into a non-recoverable error
  // while calling the SDK (step 3), it will side-step steps 4 and 5 and instead
  // return the _original_ payload (read during step 1) to the user.
  SDK_ERROR_MODE_UNSET = 0;

  // This instructs the shim to ABORT execution if the SDK runs into any
  // non-recoverable errors. Upon aborting, the shim will return the error that
  // the SDK ran into and the error will be passed all the way back to the user.
  SDK_ERROR_MODE_STRICT = 1;
}

// SDKRuntimeConfig is the configuration structure that is used in SDKs to
// configure how the SDK behaves at runtime. It is most often exposed as an
// optional parameter that you can pass to an upstream library's read or write
// operation. Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...})
//
// NOTE: This structure is usually used when the SDK is used via a shim/wrapper
// library where you have less control over SDK behavior. Read more about shims
// here: https://docs.streamdal.com/en/core-components/libraries-shims/
message SDKRuntimeConfig {
  // Specifies how the shim should behave if it runs into any errors when calling the SDK
  optional SDKErrorMode error_mode = 1;

  // Audience that will be used by shim when calling SDK.Process()
  optional protos.Audience audience = 2;
}
