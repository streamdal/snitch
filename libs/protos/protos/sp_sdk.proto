syntax = "proto3";

package protos;

import "sp_common.proto";
import "sp_pipeline.proto";

option go_package = "github.com/streamdal/streamdal/libs/protos/build/go/protos";

enum ExecStatus {
  // Unset status. This should never be returned by the SDK. If it does, it is
  // probably a bug (and you should file an issue)
  EXEC_STATUS_UNSET = 0;

  // Indicates that the step execution evaluated to "true"
  EXEC_STATUS_TRUE = 1;

  // Indicates that the step execution evaluated to "false"
  EXEC_STATUS_FALSE = 2;

  // Indicates that the SDK encountered an error while trying to process the
  // request. Example error cases: SDK can't find the appropriate Wasm module,
  // Wasm function cannot alloc or dealloc memory, etc.
  EXEC_STATUS_ERROR = 3;
}

enum SDKClientType {
  // The SDK is used as a standalone client
  SDKClientTypeSDK = 0;

  // The SDK is used within a shim/wrapper library
  SDKClientTypeShim = 1;
}

// Common request used by all SDKs in their .Process() method
message SDKRequest {
  // The input payload that the SDK will process
  bytes data = 1;

  // Audience that should be announced for this request
  protos.Audience audience = 2;
}

// Common return response used by all SDKs
message SDKResponse {
  // Contains (potentially) modified input data
  bytes data = 1;

  // Execution status of the last step
  ExecStatus status = 2;

  // Optional message accompanying the exec status for the last step
  optional string status_message = 3;

  // An array of pipelines that the SDK executed and the status of each step
  repeated PipelineStatus pipeline_status = 4;

  // Includes any metadata that the step(s) may want to pass back to the user.
  //
  // NOTE: Metadata is aggregated across all steps in the pipeline, so if two
  // steps both set a key "foo" to different values, the value of "foo" in the
  // response will be the value set by the last step in the pipeline.
  //
  // To learn more about "metadata", see SDK Spec V2 doc "Pipeline Step & Error
  // Behavior" section.
  map<string, string> metadata = 5;
}

// SDKStartupConfig is a common configuration structure that is used by all
// Streamdal SDKs to configure the client at startup. NOTE: These are _baseline_
// options - some SDKs may expose additional options.
message SDKStartupConfig {
  // REQUIRED: URL for the Streamdal server gRPC API. Example: "streamdal-server-address:8082"
  string server_url = 1;

  // REQUIRED: Auth token used to authenticate with the Streamdal server.
  // NOTE: should be the same as the token used for running the Streamdal server.
  string auth_token = 2;

  // REQUIRED: Service name used for identifying the SDK client in the Streamdal
  // server and console.
  string service_name = 3;

  // OPTIONAL: List of audiences you can specify at registration time. This is
  // useful if you know your audiences in advance and want to populate service
  // groups in the Streamdal UI _before_ your code executes any .Process() calls.
  repeated protos.Audience audiences = 4;

  // OPTIONAL: How long to wait for a pipeline execution to complete before timing out
  int32 pipeline_timeout_seconds = 5;

  // OPTIONAL: How long to wait for a step execution to complete before timing out
  int32 step_timeout_seconds = 6;

  // OPTIONAL: Instruct the SDK to execute pipelines but return ORIGINAL input
  // payload instead of (potentially) modified payload.
  bool dry_run = 7;

  // ------------------------- Internal Settings ------------------------
  //
  // These are "internal" settings that generally do not have to be used by the
  // SDK user.

  // ClientType specifies whether this of the SDK is used in a shim library or
  // as a standalone SDK. This information is used for both debug info and to
  // help SDKs determine whether ServerURL and ServerToken should be optional or
  // required. Unless you are developing a shim, you should not have to set this.
  // Default: SDKClientTypeSDK
  optional SDKClientType _internal_client_type = 1000;

  // --------------------- Shim/Wrapper Library Settings ---------------------
  //
  // "Shim" settings are _primarily_ used when the SDK is used within a shim/wrapper
  // library. Setting them outside of a shim will have no effect.
  //
  // Read more about shims: https://docs.streamdal.com/en/core-components/libraries-shims/
  //

  // By default, the shim will execute pipelines on every read/write call to the
  // upstream library. If this is set to true, the shim will only execute its
  // workload if the upstream library is called with a protos.SDKRuntimeConfig.
  // Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...}).
  bool _internal_require_runtime_config = 2000;

  // When enabled and the shim run into any non-recoverable errors, it will
  // return the error to the upstream library. By default, the shim will ignore
  // the error and pass the original data back to the upstream library.
  bool _internal_shim_strict_error_mode = 2001;
}

// SDKRuntimeConfig is the configuration structure that is used in SDKs to
// configure how the SDK behaves at runtime. It is most often exposed as an
// optional parameter that you can pass to an upstream library's read or write
// operation. Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...})
//
// NOTE: This structure is usually used when the SDK is used within a shim/wrapper
// library where you have less control over SDK behavior. Read more about shims
// here: https://docs.streamdal.com/en/core-components/libraries-shims/
message SDKRuntimeConfig {
  // Audience that will be used by shim when calling SDK.Process()
  protos.Audience audience = 1;

  // Specifies how the shim should behave if it runs into any errors when calling the SDK
  bool strict_error_mode = 2;
}

message PipelineStatus {
  // ID of the pipeline
  string id = 1;

  // The name of the pipeline
  string name = 2;

  // The status of each step in the pipeline
  repeated StepStatus step_status = 3;
}

message StepStatus {
  // The name of the step
  string name = 1;

  // Execution outcome status of the step
  ExecStatus status = 2;

  // Optional message accompanying the exec status
  optional string status_message = 3;

  // Indicates if current or all future pipelines were aborted.
  //
  // IMPORTANT: The SDK running into an error does not automatically abort
  // current or all future pipelines - the user must define the abort conditions
  // for "on_error".
  AbortCondition abort_condition = 4;
}
