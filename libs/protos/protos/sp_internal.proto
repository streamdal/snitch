syntax = "proto3";

package protos;

import "sp_command.proto";
import "sp_common.proto";
import "sp_info.proto";
import "sp_pipeline.proto";

option go_package = "github.com/streamdal/streamdal/libs/protos/build/go/protos";

service Internal {
  // Initial method that an SDK should call to register itself with the server.
  // The server will use this stream to send commands to the SDK via the
  // `CommandResponse` message. Clients should continuously listen for
  // CommandResponse messages and re-establish registration if the stream gets
  // disconnected.
  rpc Register(RegisterRequest) returns (stream protos.Command);

  // Declare a new audience that the SDK is able to accept commands for.
  // An SDK would use this method when a new audience is declared by the user
  // via `.Process()`.
  rpc NewAudience(NewAudienceRequest) returns (StandardResponse);

  // SDK is responsible for sending heartbeats to the server to let the server
  // know about active consumers and producers.
  rpc Heartbeat(HeartbeatRequest) returns (StandardResponse);

  // Use this method when Notify condition has been triggered; the server will
  // decide on what to do about the notification.
  rpc Notify(NotifyRequest) returns (StandardResponse);

  // Send periodic metrics to the server
  rpc Metrics(MetricsRequest) returns (StandardResponse);

  // Used to pull all pipeline configs for the service name in the SDK's constructor
  // This is needed because Register() is async
  rpc GetAttachCommandsByService(GetAttachCommandsByServiceRequest) returns (GetAttachCommandsByServiceResponse);

  rpc SendTail(stream TailResponse) returns (StandardResponse);

  // Used by SDK to send a new schema to the server
  rpc SendSchema(SendSchemaRequest) returns (StandardResponse);
}

message NewAudienceRequest {
  // The session that is performing this call
  string session_id = 1;

  // Newly created audience.
  Audience audience = 2;
}

// Each consumer and producer should send periodic heartbeats to the server
// to let the server know that they are still active.
message HeartbeatRequest {
  // Session ID for this instance of the SDK.
  string session_id = 1;

  // Name of the service that is sending the heartbeat. Used for refreshing registration
  string service_name = 2;

  // Used for refreshing live audience keys in the event that backing store
  // connection is lost and TTLed audience keys are lost
  repeated Audience audiences = 3;

  // Used for refreshing registration
  protos.ClientInfo client_info = 4;
}

message NotifyRequest {
  string pipeline_id = 1;
  string step_name = 2;
  Audience audience = 3;
  int64 occurred_at_unix_ts_utc = 4;
}

message MetricsRequest {
  repeated protos.Metric metrics = 1;
}

message RegisterRequest {
  // REQUIRED -- Name of the service that is registering.
  string service_name = 1;

  // REQUIRED -- Unique ID for this SDK instance.
  //
  // This should be generated every time the SDK is instantiated (oe. every
  // time a NEW registration is performed).
  string session_id = 2;

  // REQUIRED -- Info about the client (lib name, lang, os, arch, etc.)
  protos.ClientInfo client_info = 3;

  // OPTIONAL -- if these are defined, these will show up in the UI even if
  // there is no active .Process() call from the SDK.
  repeated protos.Audience audiences = 4;

  // OPTIONAL -- If set, we know that any pipelines or steps executed in this
  // SDK will NOT modify the input/output data. As in, the SDK will log what it
  // _would_ do and always return the original data set.
  bool dry_run = 5;
}

// Same as RegisterRequest - used for broadcasting a deregistration event
message DeregisterRequest {
  string service_name = 1;
  string session_id = 2;
}

message GetAttachCommandsByServiceRequest {
  string service_name = 1;
}

message GetAttachCommandsByServiceResponse {
  // AttachCommands for all active pipelines
  repeated protos.Pipeline active = 1;

  // AttachCommands, but ones which are paused
  // The SDK still needs to have these to support un-pausing
  repeated protos.Pipeline paused = 2;

  // ID = wasm ID
  map<string,WasmModule> wasm_modules = 3;
}

// WasmModule is used to ensure we only send the wasm module once per request
// instead of duplicated in every pipeline where it is used. This prevents
// over-sized payloads on SDK startup
message WasmModule {
  // ID is a uuid(sha256(_wasm_bytes)) that is set by streamdal server
  string id = 1;

  // WASM module bytes (set by server)
  bytes bytes = 2;

  // WASM function name to execute (set by server)
  string function = 3;
}

message SendSchemaRequest {
  Audience audience = 1;
  Schema schema = 2;
}
