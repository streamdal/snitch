// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: sp_sdk.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExecStatus int32

const (
	// Unset status. This should never be returned by the SDK. If it does, it is
	// probably a bug (and you should file an issue)
	ExecStatus_EXEC_STATUS_UNSET ExecStatus = 0
	// Indicates that the step execution evaluated to "true"
	ExecStatus_EXEC_STATUS_TRUE ExecStatus = 1
	// Indicates that the step execution evaluated to "false"
	ExecStatus_EXEC_STATUS_FALSE ExecStatus = 2
	// Indicates that the SDK encountered an error while trying to process the
	// request. Example error cases: SDK can't find the appropriate Wasm module,
	// Wasm function cannot alloc or dealloc memory, etc.
	ExecStatus_EXEC_STATUS_ERROR ExecStatus = 3
)

// Enum value maps for ExecStatus.
var (
	ExecStatus_name = map[int32]string{
		0: "EXEC_STATUS_UNSET",
		1: "EXEC_STATUS_TRUE",
		2: "EXEC_STATUS_FALSE",
		3: "EXEC_STATUS_ERROR",
	}
	ExecStatus_value = map[string]int32{
		"EXEC_STATUS_UNSET": 0,
		"EXEC_STATUS_TRUE":  1,
		"EXEC_STATUS_FALSE": 2,
		"EXEC_STATUS_ERROR": 3,
	}
)

func (x ExecStatus) Enum() *ExecStatus {
	p := new(ExecStatus)
	*p = x
	return p
}

func (x ExecStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_sdk_proto_enumTypes[0].Descriptor()
}

func (ExecStatus) Type() protoreflect.EnumType {
	return &file_sp_sdk_proto_enumTypes[0]
}

func (x ExecStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecStatus.Descriptor instead.
func (ExecStatus) EnumDescriptor() ([]byte, []int) {
	return file_sp_sdk_proto_rawDescGZIP(), []int{0}
}

// Indicates whether the SDK is being used directly or via a shim/wrapper library.
// This is primarily intended to be used by shims so that the SDK can determine
// if the ServerURL and ServerToken should be optional or required.
// protolint:disable ENUM_FIELD_NAMES_PREFIX
type SDKClientType int32

const (
	// The SDK is used directly as a standalone library
	SDKClientType_SDK_CLIENT_TYPE_DIRECT SDKClientType = 0
	// The SDK is used within a shim/wrapper library
	SDKClientType_SDK_CLIENT_TYPE_SHIM SDKClientType = 1
)

// Enum value maps for SDKClientType.
var (
	SDKClientType_name = map[int32]string{
		0: "SDK_CLIENT_TYPE_DIRECT",
		1: "SDK_CLIENT_TYPE_SHIM",
	}
	SDKClientType_value = map[string]int32{
		"SDK_CLIENT_TYPE_DIRECT": 0,
		"SDK_CLIENT_TYPE_SHIM":   1,
	}
)

func (x SDKClientType) Enum() *SDKClientType {
	p := new(SDKClientType)
	*p = x
	return p
}

func (x SDKClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SDKClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_sp_sdk_proto_enumTypes[1].Descriptor()
}

func (SDKClientType) Type() protoreflect.EnumType {
	return &file_sp_sdk_proto_enumTypes[1]
}

func (x SDKClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SDKClientType.Descriptor instead.
func (SDKClientType) EnumDescriptor() ([]byte, []int) {
	return file_sp_sdk_proto_rawDescGZIP(), []int{1}
}

// Common request used by all SDKs in their .Process() method
type SDKRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input payload that the SDK will process
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Audience that should be announced for this request
	Audience *Audience `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
}

func (x *SDKRequest) Reset() {
	*x = SDKRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_sdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequest) ProtoMessage() {}

func (x *SDKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sp_sdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequest.ProtoReflect.Descriptor instead.
func (*SDKRequest) Descriptor() ([]byte, []int) {
	return file_sp_sdk_proto_rawDescGZIP(), []int{0}
}

func (x *SDKRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SDKRequest) GetAudience() *Audience {
	if x != nil {
		return x.Audience
	}
	return nil
}

// Common return response used by all SDKs
type SDKResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains (potentially) modified input data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Execution status of the last step
	Status ExecStatus `protobuf:"varint,2,opt,name=status,proto3,enum=protos.ExecStatus" json:"status,omitempty"`
	// Optional message accompanying the exec status for the last step
	StatusMessage *string `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3,oneof" json:"status_message,omitempty"`
	// An array of pipelines that the SDK executed and the status of each step
	PipelineStatus []*PipelineStatus `protobuf:"bytes,4,rep,name=pipeline_status,json=pipelineStatus,proto3" json:"pipeline_status,omitempty"`
	// Includes any metadata that the step(s) may want to pass back to the user.
	//
	// NOTE: Metadata is aggregated across all steps in the pipeline, so if two
	// steps both set a key "foo" to different values, the value of "foo" in the
	// response will be the value set by the last step in the pipeline.
	//
	// To learn more about "metadata", see SDK Spec V2 doc "Pipeline Step & Error
	// Behavior" section.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SDKResponse) Reset() {
	*x = SDKResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_sdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKResponse) ProtoMessage() {}

func (x *SDKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sp_sdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKResponse.ProtoReflect.Descriptor instead.
func (*SDKResponse) Descriptor() ([]byte, []int) {
	return file_sp_sdk_proto_rawDescGZIP(), []int{1}
}

func (x *SDKResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SDKResponse) GetStatus() ExecStatus {
	if x != nil {
		return x.Status
	}
	return ExecStatus_EXEC_STATUS_UNSET
}

func (x *SDKResponse) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

func (x *SDKResponse) GetPipelineStatus() []*PipelineStatus {
	if x != nil {
		return x.PipelineStatus
	}
	return nil
}

func (x *SDKResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// SDKStartupConfig is a common configuration structure that is used by all
// Streamdal SDKs to configure the client at startup. NOTE: These are _baseline_
// options - some SDKs may expose additional options.
// protolint:disable FIELD_NAMES_LOWER_SNAKE_CASE
type SDKStartupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED: URL for the Streamdal server gRPC API. Example: "streamdal-server-address:8082"
	ServerUrl string `protobuf:"bytes,1,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	// REQUIRED: Auth token used to authenticate with the Streamdal server.
	// NOTE: should be the same as the token used for running the Streamdal server.
	AuthToken string `protobuf:"bytes,2,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// REQUIRED: Service name used for identifying the SDK client in the Streamdal
	// server and console.
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// OPTIONAL: List of audiences you can specify at registration time. This is
	// useful if you know your audiences in advance and want to populate service
	// groups in the Streamdal UI _before_ your code executes any .Process() calls.
	Audiences []*Audience `protobuf:"bytes,4,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// OPTIONAL: How long to wait for a pipeline execution to complete before timing out
	PipelineTimeoutSeconds int32 `protobuf:"varint,5,opt,name=pipeline_timeout_seconds,json=pipelineTimeoutSeconds,proto3" json:"pipeline_timeout_seconds,omitempty"`
	// OPTIONAL: How long to wait for a step execution to complete before timing out
	StepTimeoutSeconds int32 `protobuf:"varint,6,opt,name=step_timeout_seconds,json=stepTimeoutSeconds,proto3" json:"step_timeout_seconds,omitempty"`
	// OPTIONAL: Instruct the SDK to execute pipelines but return ORIGINAL input
	// payload instead of (potentially) modified payload.
	DryRun bool `protobuf:"varint,7,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// ClientType specifies whether this of the SDK is used in a shim library or
	// as a standalone SDK. This information is used for both debug info and to
	// help SDKs determine whether ServerURL and ServerToken should be optional or
	// required. Unless you are developing a shim, you should not have to set this.
	// Default: SDKClientTypeSDK
	XInternalClientType *SDKClientType `protobuf:"varint,1000,opt,name=_internal_client_type,json=InternalClientType,proto3,enum=protos.SDKClientType,oneof" json:"_internal_client_type,omitempty"`
	// By default, the shim will execute pipelines on every read/write call to the
	// upstream library. If this is set to true, the shim will only execute its
	// workload if the upstream library is called with a protos.SDKRuntimeConfig.
	// Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...}).
	XInternalShimRequireRuntimeConfig bool `protobuf:"varint,2000,opt,name=_internal_shim_require_runtime_config,json=InternalShimRequireRuntimeConfig,proto3" json:"_internal_shim_require_runtime_config,omitempty"`
	// When enabled and the shim run into any non-recoverable errors, it will
	// return the error to the upstream library. If left unset, the shim will
	// ignore the error and pass the original data back to the upstream library.
	XInternalShimStrictErrorHandling bool `protobuf:"varint,2001,opt,name=_internal_shim_strict_error_handling,json=InternalShimStrictErrorHandling,proto3" json:"_internal_shim_strict_error_handling,omitempty"`
}

func (x *SDKStartupConfig) Reset() {
	*x = SDKStartupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_sdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKStartupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKStartupConfig) ProtoMessage() {}

func (x *SDKStartupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sp_sdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKStartupConfig.ProtoReflect.Descriptor instead.
func (*SDKStartupConfig) Descriptor() ([]byte, []int) {
	return file_sp_sdk_proto_rawDescGZIP(), []int{2}
}

func (x *SDKStartupConfig) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *SDKStartupConfig) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *SDKStartupConfig) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SDKStartupConfig) GetAudiences() []*Audience {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *SDKStartupConfig) GetPipelineTimeoutSeconds() int32 {
	if x != nil {
		return x.PipelineTimeoutSeconds
	}
	return 0
}

func (x *SDKStartupConfig) GetStepTimeoutSeconds() int32 {
	if x != nil {
		return x.StepTimeoutSeconds
	}
	return 0
}

func (x *SDKStartupConfig) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *SDKStartupConfig) GetXInternalClientType() SDKClientType {
	if x != nil && x.XInternalClientType != nil {
		return *x.XInternalClientType
	}
	return SDKClientType_SDK_CLIENT_TYPE_DIRECT
}

func (x *SDKStartupConfig) GetXInternalShimRequireRuntimeConfig() bool {
	if x != nil {
		return x.XInternalShimRequireRuntimeConfig
	}
	return false
}

func (x *SDKStartupConfig) GetXInternalShimStrictErrorHandling() bool {
	if x != nil {
		return x.XInternalShimStrictErrorHandling
	}
	return false
}

// SDKRuntimeConfig is the configuration structure that is used primarily by
// shims to configure SDK behavior at runtime. It is most often exposed as an
// optional parameter that you can pass to an upstream library's read or write
// operation. Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...})
//
// Read more about shims: https://docs.streamdal.com/en/core-components/libraries-shims/
type SDKRuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Audience that will be used by shim when calling SDK.Process().
	// NOTE: If ServiceName is not provided, the shim will use the service name
	// provided in the SDKStartupConfig.
	Audience *Audience `protobuf:"bytes,1,opt,name=audience,proto3" json:"audience,omitempty"`
	// Specifies how the shim should behave if it runs into any errors when
	// calling the SDK. If set, this setting will override the behavior set in
	// SDKStartupConfig._internal_shim_strict_error_handling.
	StrictErrorHandling *bool `protobuf:"varint,2,opt,name=strict_error_handling,json=strictErrorHandling,proto3,oneof" json:"strict_error_handling,omitempty"`
}

func (x *SDKRuntimeConfig) Reset() {
	*x = SDKRuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_sdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRuntimeConfig) ProtoMessage() {}

func (x *SDKRuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_sp_sdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRuntimeConfig.ProtoReflect.Descriptor instead.
func (*SDKRuntimeConfig) Descriptor() ([]byte, []int) {
	return file_sp_sdk_proto_rawDescGZIP(), []int{3}
}

func (x *SDKRuntimeConfig) GetAudience() *Audience {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *SDKRuntimeConfig) GetStrictErrorHandling() bool {
	if x != nil && x.StrictErrorHandling != nil {
		return *x.StrictErrorHandling
	}
	return false
}

type PipelineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the pipeline
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the pipeline
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The status of each step in the pipeline
	StepStatus []*StepStatus `protobuf:"bytes,3,rep,name=step_status,json=stepStatus,proto3" json:"step_status,omitempty"`
}

func (x *PipelineStatus) Reset() {
	*x = PipelineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_sdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStatus) ProtoMessage() {}

func (x *PipelineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sp_sdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStatus.ProtoReflect.Descriptor instead.
func (*PipelineStatus) Descriptor() ([]byte, []int) {
	return file_sp_sdk_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineStatus) GetStepStatus() []*StepStatus {
	if x != nil {
		return x.StepStatus
	}
	return nil
}

type StepStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the step
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Execution outcome status of the step
	Status ExecStatus `protobuf:"varint,2,opt,name=status,proto3,enum=protos.ExecStatus" json:"status,omitempty"`
	// Optional message accompanying the exec status
	StatusMessage *string `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3,oneof" json:"status_message,omitempty"`
	// Indicates if current or all future pipelines were aborted.
	//
	// IMPORTANT: The SDK running into an error does not automatically abort
	// current or all future pipelines - the user must define the abort conditions
	// for "on_error".
	AbortCondition AbortCondition `protobuf:"varint,4,opt,name=abort_condition,json=abortCondition,proto3,enum=protos.AbortCondition" json:"abort_condition,omitempty"`
}

func (x *StepStatus) Reset() {
	*x = StepStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sp_sdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepStatus) ProtoMessage() {}

func (x *StepStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sp_sdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepStatus.ProtoReflect.Descriptor instead.
func (*StepStatus) Descriptor() ([]byte, []int) {
	return file_sp_sdk_proto_rawDescGZIP(), []int{5}
}

func (x *StepStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StepStatus) GetStatus() ExecStatus {
	if x != nil {
		return x.Status
	}
	return ExecStatus_EXEC_STATUS_UNSET
}

func (x *StepStatus) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

func (x *StepStatus) GetAbortCondition() AbortCondition {
	if x != nil {
		return x.AbortCondition
	}
	return AbortCondition_ABORT_CONDITION_UNSET
}

var File_sp_sdk_proto protoreflect.FileDescriptor

var file_sp_sdk_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x70, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x0f, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x70, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0a, 0x53, 0x44,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0b, 0x53,
	0x44, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb4, 0x04, 0x0a, 0x10, 0x53, 0x44, 0x4b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x44, 0x4b, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x12, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x25, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x68, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x24, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x68, 0x69, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0xd1, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x6d,
	0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x42, 0x18, 0x0a, 0x16, 0x58, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x93, 0x01,
	0x0a, 0x10, 0x53, 0x44, 0x4b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x37, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x22, 0x69, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcc,
	0x01, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x67, 0x0a,
	0x0a, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x58, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x45, 0x43,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0d, 0x53, 0x44, 0x4b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x44, 0x4b, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x44, 0x4b, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x4d, 0x10, 0x01, 0x42, 0x3c, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x61, 0x6c, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x2f,
	0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sp_sdk_proto_rawDescOnce sync.Once
	file_sp_sdk_proto_rawDescData = file_sp_sdk_proto_rawDesc
)

func file_sp_sdk_proto_rawDescGZIP() []byte {
	file_sp_sdk_proto_rawDescOnce.Do(func() {
		file_sp_sdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_sp_sdk_proto_rawDescData)
	})
	return file_sp_sdk_proto_rawDescData
}

var file_sp_sdk_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sp_sdk_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sp_sdk_proto_goTypes = []interface{}{
	(ExecStatus)(0),          // 0: protos.ExecStatus
	(SDKClientType)(0),       // 1: protos.SDKClientType
	(*SDKRequest)(nil),       // 2: protos.SDKRequest
	(*SDKResponse)(nil),      // 3: protos.SDKResponse
	(*SDKStartupConfig)(nil), // 4: protos.SDKStartupConfig
	(*SDKRuntimeConfig)(nil), // 5: protos.SDKRuntimeConfig
	(*PipelineStatus)(nil),   // 6: protos.PipelineStatus
	(*StepStatus)(nil),       // 7: protos.StepStatus
	nil,                      // 8: protos.SDKResponse.MetadataEntry
	(*Audience)(nil),         // 9: protos.Audience
	(AbortCondition)(0),      // 10: protos.AbortCondition
}
var file_sp_sdk_proto_depIdxs = []int32{
	9,  // 0: protos.SDKRequest.audience:type_name -> protos.Audience
	0,  // 1: protos.SDKResponse.status:type_name -> protos.ExecStatus
	6,  // 2: protos.SDKResponse.pipeline_status:type_name -> protos.PipelineStatus
	8,  // 3: protos.SDKResponse.metadata:type_name -> protos.SDKResponse.MetadataEntry
	9,  // 4: protos.SDKStartupConfig.audiences:type_name -> protos.Audience
	1,  // 5: protos.SDKStartupConfig._internal_client_type:type_name -> protos.SDKClientType
	9,  // 6: protos.SDKRuntimeConfig.audience:type_name -> protos.Audience
	7,  // 7: protos.PipelineStatus.step_status:type_name -> protos.StepStatus
	0,  // 8: protos.StepStatus.status:type_name -> protos.ExecStatus
	10, // 9: protos.StepStatus.abort_condition:type_name -> protos.AbortCondition
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sp_sdk_proto_init() }
func file_sp_sdk_proto_init() {
	if File_sp_sdk_proto != nil {
		return
	}
	file_sp_common_proto_init()
	file_sp_pipeline_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sp_sdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_sdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_sdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKStartupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_sdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_sdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sp_sdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sp_sdk_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_sp_sdk_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_sp_sdk_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_sp_sdk_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sp_sdk_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sp_sdk_proto_goTypes,
		DependencyIndexes: file_sp_sdk_proto_depIdxs,
		EnumInfos:         file_sp_sdk_proto_enumTypes,
		MessageInfos:      file_sp_sdk_proto_msgTypes,
	}.Build()
	File_sp_sdk_proto = out.File
	file_sp_sdk_proto_rawDesc = nil
	file_sp_sdk_proto_goTypes = nil
	file_sp_sdk_proto_depIdxs = nil
}
