// @generated by protobuf-ts 2.9.0 with parameter long_type_string
// @generated from protobuf file "sp_common.proto" (package "protos", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PipelineConfigs } from "./sp_pipeline.js";
import { WasmModule } from "./shared/sp_shared.js";
import { NotificationConfig } from "./sp_notify.js";
import { Pipeline } from "./sp_pipeline.js";
/**
 * Common response message for many gRPC methods
 *
 * @generated from protobuf message protos.StandardResponse
 */
export interface StandardResponse {
    /**
     * Co-relation ID for the request / response
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: protos.ResponseCode code = 2;
     */
    code: ResponseCode;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
}
/**
 * Used to indicate who a command is intended for
 *
 * @generated from protobuf message protos.Audience
 */
export interface Audience {
    /**
     * Name of the service -- let's include the service name on all calls, we can
     * optimize later ~DS
     *
     * @generated from protobuf field: string service_name = 1;
     */
    serviceName: string;
    /**
     * Name of the component the SDK is interacting with (ie. kafka-$topic-name)
     *
     * @generated from protobuf field: string component_name = 2;
     */
    componentName: string;
    /**
     * Consumer or Producer
     *
     * @generated from protobuf field: protos.OperationType operation_type = 3;
     */
    operationType: OperationType;
    /**
     * Name for the consumer or producer
     *
     * @generated from protobuf field: string operation_name = 4;
     */
    operationName: string;
    /**
     * Used internally by server and k8s operator to determine who manages this resource
     *
     * @generated from protobuf field: optional string _created_by = 1000;
     */
    CreatedBy?: string; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}
/**
 * @generated from protobuf message protos.Metric
 */
export interface Metric {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: map<string, string> labels = 2;
     */
    labels: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: double value = 3;
     */
    value: number;
    /**
     * @generated from protobuf field: protos.Audience audience = 4;
     */
    audience?: Audience;
}
/**
 * @generated from protobuf message protos.TailRequest
 */
export interface TailRequest {
    /**
     * @generated from protobuf field: protos.TailRequestType type = 1;
     */
    type: TailRequestType;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: protos.Audience audience = 3;
     */
    audience?: Audience;
    /**
     * @deprecated
     * @generated from protobuf field: optional string pipeline_id = 4 [deprecated = true];
     */
    pipelineId?: string;
    /**
     * @generated from protobuf field: protos.SampleOptions sample_options = 5;
     */
    sampleOptions?: SampleOptions;
    /**
     * @generated from protobuf field: map<string, string> _metadata = 1000;
     */
    Metadata: {
        [key: string]: string;
    }; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}
/**
 * TailResponse originates in the SDK and then is sent to streamdal servers where
 * it is forwarded to the correct frontend streaming gRPC connection
 *
 * @generated from protobuf message protos.TailResponse
 */
export interface TailResponse {
    /**
     * @generated from protobuf field: protos.TailResponseType type = 1;
     */
    type: TailResponseType;
    /**
     * @generated from protobuf field: string tail_request_id = 2;
     */
    tailRequestId: string;
    /**
     * @generated from protobuf field: protos.Audience audience = 3;
     */
    audience?: Audience;
    /**
     * @generated from protobuf field: string pipeline_id = 4;
     */
    pipelineId: string;
    /**
     * @generated from protobuf field: string session_id = 5;
     */
    sessionId: string;
    /**
     * Timestamp in nanoseconds
     *
     * @generated from protobuf field: int64 timestamp_ns = 6;
     */
    timestampNs: string;
    /**
     * Payload data. For errors, this will be the error message
     * For payloads, this will be JSON of the payload data, post processing
     *
     * @generated from protobuf field: bytes original_data = 7;
     */
    originalData: Uint8Array;
    /**
     * For payloads, this will be the new data, post processing
     *
     * @generated from protobuf field: bytes new_data = 8;
     */
    newData: Uint8Array;
    /**
     * @generated from protobuf field: map<string, string> _metadata = 1000;
     */
    Metadata: {
        [key: string]: string;
    }; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
    /**
     * Set by server to indicate that the response is a keepalive message
     *
     * @generated from protobuf field: optional bool _keepalive = 1001;
     */
    Keepalive?: boolean; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}
/**
 * @generated from protobuf message protos.AudienceRate
 */
export interface AudienceRate {
    /**
     * @generated from protobuf field: double bytes = 1;
     */
    bytes: number;
    /**
     * @generated from protobuf field: double processed = 2;
     */
    processed: number;
}
/**
 * @generated from protobuf message protos.Schema
 */
export interface Schema {
    /**
     * @generated from protobuf field: bytes json_schema = 1;
     */
    jsonSchema: Uint8Array;
    /**
     * @generated from protobuf field: int32 _version = 100;
     */
    Version: number; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
    /**
     * @generated from protobuf field: map<string, string> _metadata = 1000;
     */
    Metadata: {
        [key: string]: string;
    }; // protolint:disable:this FIELD_NAMES_LOWER_SNAKE_CASE
}
/**
 * @generated from protobuf message protos.SampleOptions
 */
export interface SampleOptions {
    /**
     * @generated from protobuf field: uint32 sample_rate = 1;
     */
    sampleRate: number;
    /**
     * @generated from protobuf field: uint32 sample_interval_seconds = 2;
     */
    sampleIntervalSeconds: number;
}
/**
 * Config is returned by external.GetConfig() and is used by the K8S operator
 *
 * @generated from protobuf message protos.Config
 */
export interface Config {
    /**
     * @generated from protobuf field: repeated protos.Audience audiences = 1;
     */
    audiences: Audience[];
    /**
     * @generated from protobuf field: repeated protos.Pipeline pipelines = 2;
     */
    pipelines: Pipeline[];
    /**
     * @generated from protobuf field: repeated protos.NotificationConfig notifications = 3;
     */
    notifications: NotificationConfig[];
    /**
     * @generated from protobuf field: repeated protos.shared.WasmModule wasm_modules = 4;
     */
    wasmModules: WasmModule[];
    /**
     * @generated from protobuf field: map<string, protos.PipelineConfigs> audience_mappings = 5;
     */
    audienceMappings: {
        [key: string]: PipelineConfigs;
    }; // key == audience as string
}
/**
 * Common status codes used in gRPC method responses
 *
 * @generated from protobuf enum protos.ResponseCode
 */
export enum ResponseCode {
    /**
     * @generated from protobuf enum value: RESPONSE_CODE_UNSET = 0;
     */
    UNSET = 0,
    /**
     * @generated from protobuf enum value: RESPONSE_CODE_OK = 1;
     */
    OK = 1,
    /**
     * @generated from protobuf enum value: RESPONSE_CODE_BAD_REQUEST = 2;
     */
    BAD_REQUEST = 2,
    /**
     * @generated from protobuf enum value: RESPONSE_CODE_NOT_FOUND = 3;
     */
    NOT_FOUND = 3,
    /**
     * @generated from protobuf enum value: RESPONSE_CODE_INTERNAL_SERVER_ERROR = 4;
     */
    INTERNAL_SERVER_ERROR = 4,
    /**
     * @generated from protobuf enum value: RESPONSE_CODE_GENERIC_ERROR = 5;
     */
    GENERIC_ERROR = 5
}
/**
 * Each SDK client is a $service + $component + $operation_type
 *
 * @generated from protobuf enum protos.OperationType
 */
export enum OperationType {
    /**
     * @generated from protobuf enum value: OPERATION_TYPE_UNSET = 0;
     */
    UNSET = 0,
    /**
     * @generated from protobuf enum value: OPERATION_TYPE_CONSUMER = 1;
     */
    CONSUMER = 1,
    /**
     * @generated from protobuf enum value: OPERATION_TYPE_PRODUCER = 2;
     */
    PRODUCER = 2
}
/**
 * @generated from protobuf enum protos.TailResponseType
 */
export enum TailResponseType {
    /**
     * @generated from protobuf enum value: TAIL_RESPONSE_TYPE_UNSET = 0;
     */
    UNSET = 0,
    /**
     * @generated from protobuf enum value: TAIL_RESPONSE_TYPE_PAYLOAD = 1;
     */
    PAYLOAD = 1,
    /**
     * @generated from protobuf enum value: TAIL_RESPONSE_TYPE_ERROR = 2;
     */
    ERROR = 2
}
/**
 * @generated from protobuf enum protos.TailRequestType
 */
export enum TailRequestType {
    /**
     * @generated from protobuf enum value: TAIL_REQUEST_TYPE_UNSET = 0;
     */
    UNSET = 0,
    /**
     * @generated from protobuf enum value: TAIL_REQUEST_TYPE_START = 1;
     */
    START = 1,
    /**
     * @generated from protobuf enum value: TAIL_REQUEST_TYPE_STOP = 2;
     */
    STOP = 2,
    /**
     * @generated from protobuf enum value: TAIL_REQUEST_TYPE_PAUSE = 3;
     */
    PAUSE = 3,
    /**
     * @generated from protobuf enum value: TAIL_REQUEST_TYPE_RESUME = 4;
     */
    RESUME = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class StandardResponse$Type extends MessageType<StandardResponse> {
    constructor() {
        super("protos.StandardResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "enum", T: () => ["protos.ResponseCode", ResponseCode, "RESPONSE_CODE_"] },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StandardResponse>): StandardResponse {
        const message = { id: "", code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StandardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StandardResponse): StandardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* protos.ResponseCode code */ 2:
                    message.code = reader.int32();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StandardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* protos.ResponseCode code = 2; */
        if (message.code !== 0)
            writer.tag(2, WireType.Varint).int32(message.code);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.StandardResponse
 */
export const StandardResponse = new StandardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Audience$Type extends MessageType<Audience> {
    constructor() {
        super("protos.Audience", [
            { no: 1, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "component_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "operation_type", kind: "enum", T: () => ["protos.OperationType", OperationType, "OPERATION_TYPE_"] },
            { no: 4, name: "operation_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1000, name: "_created_by", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Audience>): Audience {
        const message = { serviceName: "", componentName: "", operationType: 0, operationName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Audience>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Audience): Audience {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_name */ 1:
                    message.serviceName = reader.string();
                    break;
                case /* string component_name */ 2:
                    message.componentName = reader.string();
                    break;
                case /* protos.OperationType operation_type */ 3:
                    message.operationType = reader.int32();
                    break;
                case /* string operation_name */ 4:
                    message.operationName = reader.string();
                    break;
                case /* optional string _created_by */ 1000:
                    message.CreatedBy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Audience, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string service_name = 1; */
        if (message.serviceName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceName);
        /* string component_name = 2; */
        if (message.componentName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.componentName);
        /* protos.OperationType operation_type = 3; */
        if (message.operationType !== 0)
            writer.tag(3, WireType.Varint).int32(message.operationType);
        /* string operation_name = 4; */
        if (message.operationName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.operationName);
        /* optional string _created_by = 1000; */
        if (message.CreatedBy !== undefined)
            writer.tag(1000, WireType.LengthDelimited).string(message.CreatedBy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Audience
 */
export const Audience = new Audience$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metric$Type extends MessageType<Metric> {
    constructor() {
        super("protos.Metric", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "labels", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 3, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "audience", kind: "message", T: () => Audience }
        ]);
    }
    create(value?: PartialMessage<Metric>): Metric {
        const message = { name: "", labels: {}, value: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Metric>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metric): Metric {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* map<string, string> labels */ 2:
                    this.binaryReadMap2(message.labels, reader, options);
                    break;
                case /* double value */ 3:
                    message.value = reader.double();
                    break;
                case /* protos.Audience audience */ 4:
                    message.audience = Audience.internalBinaryRead(reader, reader.uint32(), options, message.audience);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: Metric["labels"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Metric["labels"] | undefined, val: Metric["labels"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protos.Metric.labels");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Metric, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* map<string, string> labels = 2; */
        for (let k of Object.keys(message.labels))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.labels[k]).join();
        /* double value = 3; */
        if (message.value !== 0)
            writer.tag(3, WireType.Bit64).double(message.value);
        /* protos.Audience audience = 4; */
        if (message.audience)
            Audience.internalBinaryWrite(message.audience, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Metric
 */
export const Metric = new Metric$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TailRequest$Type extends MessageType<TailRequest> {
    constructor() {
        super("protos.TailRequest", [
            { no: 1, name: "type", kind: "enum", T: () => ["protos.TailRequestType", TailRequestType, "TAIL_REQUEST_TYPE_"] },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "audience", kind: "message", T: () => Audience },
            { no: 4, name: "pipeline_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sample_options", kind: "message", T: () => SampleOptions },
            { no: 1000, name: "_metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<TailRequest>): TailRequest {
        const message = { type: 0, id: "", Metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TailRequest): TailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.TailRequestType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* protos.Audience audience */ 3:
                    message.audience = Audience.internalBinaryRead(reader, reader.uint32(), options, message.audience);
                    break;
                case /* optional string pipeline_id = 4 [deprecated = true];*/ 4:
                    message.pipelineId = reader.string();
                    break;
                case /* protos.SampleOptions sample_options */ 5:
                    message.sampleOptions = SampleOptions.internalBinaryRead(reader, reader.uint32(), options, message.sampleOptions);
                    break;
                case /* map<string, string> _metadata */ 1000:
                    this.binaryReadMap1000(message.Metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1000(map: TailRequest["Metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TailRequest["Metadata"] | undefined, val: TailRequest["Metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protos.TailRequest._metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: TailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.TailRequestType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* protos.Audience audience = 3; */
        if (message.audience)
            Audience.internalBinaryWrite(message.audience, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional string pipeline_id = 4 [deprecated = true]; */
        if (message.pipelineId !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.pipelineId);
        /* protos.SampleOptions sample_options = 5; */
        if (message.sampleOptions)
            SampleOptions.internalBinaryWrite(message.sampleOptions, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> _metadata = 1000; */
        for (let k of Object.keys(message.Metadata))
            writer.tag(1000, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.Metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.TailRequest
 */
export const TailRequest = new TailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TailResponse$Type extends MessageType<TailResponse> {
    constructor() {
        super("protos.TailResponse", [
            { no: 1, name: "type", kind: "enum", T: () => ["protos.TailResponseType", TailResponseType, "TAIL_RESPONSE_TYPE_"] },
            { no: 2, name: "tail_request_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "audience", kind: "message", T: () => Audience },
            { no: 4, name: "pipeline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp_ns", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 7, name: "original_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "new_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 1000, name: "_metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 1001, name: "_keepalive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TailResponse>): TailResponse {
        const message = { type: 0, tailRequestId: "", pipelineId: "", sessionId: "", timestampNs: "0", originalData: new Uint8Array(0), newData: new Uint8Array(0), Metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TailResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TailResponse): TailResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.TailResponseType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string tail_request_id */ 2:
                    message.tailRequestId = reader.string();
                    break;
                case /* protos.Audience audience */ 3:
                    message.audience = Audience.internalBinaryRead(reader, reader.uint32(), options, message.audience);
                    break;
                case /* string pipeline_id */ 4:
                    message.pipelineId = reader.string();
                    break;
                case /* string session_id */ 5:
                    message.sessionId = reader.string();
                    break;
                case /* int64 timestamp_ns */ 6:
                    message.timestampNs = reader.int64().toString();
                    break;
                case /* bytes original_data */ 7:
                    message.originalData = reader.bytes();
                    break;
                case /* bytes new_data */ 8:
                    message.newData = reader.bytes();
                    break;
                case /* map<string, string> _metadata */ 1000:
                    this.binaryReadMap1000(message.Metadata, reader, options);
                    break;
                case /* optional bool _keepalive */ 1001:
                    message.Keepalive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1000(map: TailResponse["Metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TailResponse["Metadata"] | undefined, val: TailResponse["Metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protos.TailResponse._metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: TailResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.TailResponseType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string tail_request_id = 2; */
        if (message.tailRequestId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tailRequestId);
        /* protos.Audience audience = 3; */
        if (message.audience)
            Audience.internalBinaryWrite(message.audience, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string pipeline_id = 4; */
        if (message.pipelineId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pipelineId);
        /* string session_id = 5; */
        if (message.sessionId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.sessionId);
        /* int64 timestamp_ns = 6; */
        if (message.timestampNs !== "0")
            writer.tag(6, WireType.Varint).int64(message.timestampNs);
        /* bytes original_data = 7; */
        if (message.originalData.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.originalData);
        /* bytes new_data = 8; */
        if (message.newData.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.newData);
        /* map<string, string> _metadata = 1000; */
        for (let k of Object.keys(message.Metadata))
            writer.tag(1000, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.Metadata[k]).join();
        /* optional bool _keepalive = 1001; */
        if (message.Keepalive !== undefined)
            writer.tag(1001, WireType.Varint).bool(message.Keepalive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.TailResponse
 */
export const TailResponse = new TailResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudienceRate$Type extends MessageType<AudienceRate> {
    constructor() {
        super("protos.AudienceRate", [
            { no: 1, name: "bytes", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "processed", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<AudienceRate>): AudienceRate {
        const message = { bytes: 0, processed: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AudienceRate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudienceRate): AudienceRate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double bytes */ 1:
                    message.bytes = reader.double();
                    break;
                case /* double processed */ 2:
                    message.processed = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AudienceRate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double bytes = 1; */
        if (message.bytes !== 0)
            writer.tag(1, WireType.Bit64).double(message.bytes);
        /* double processed = 2; */
        if (message.processed !== 0)
            writer.tag(2, WireType.Bit64).double(message.processed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.AudienceRate
 */
export const AudienceRate = new AudienceRate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Schema$Type extends MessageType<Schema> {
    constructor() {
        super("protos.Schema", [
            { no: 1, name: "json_schema", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 100, name: "_version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1000, name: "_metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<Schema>): Schema {
        const message = { jsonSchema: new Uint8Array(0), Version: 0, Metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Schema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Schema): Schema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes json_schema */ 1:
                    message.jsonSchema = reader.bytes();
                    break;
                case /* int32 _version */ 100:
                    message.Version = reader.int32();
                    break;
                case /* map<string, string> _metadata */ 1000:
                    this.binaryReadMap1000(message.Metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1000(map: Schema["Metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Schema["Metadata"] | undefined, val: Schema["Metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protos.Schema._metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Schema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes json_schema = 1; */
        if (message.jsonSchema.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.jsonSchema);
        /* int32 _version = 100; */
        if (message.Version !== 0)
            writer.tag(100, WireType.Varint).int32(message.Version);
        /* map<string, string> _metadata = 1000; */
        for (let k of Object.keys(message.Metadata))
            writer.tag(1000, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.Metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Schema
 */
export const Schema = new Schema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SampleOptions$Type extends MessageType<SampleOptions> {
    constructor() {
        super("protos.SampleOptions", [
            { no: 1, name: "sample_rate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sample_interval_seconds", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SampleOptions>): SampleOptions {
        const message = { sampleRate: 0, sampleIntervalSeconds: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SampleOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SampleOptions): SampleOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 sample_rate */ 1:
                    message.sampleRate = reader.uint32();
                    break;
                case /* uint32 sample_interval_seconds */ 2:
                    message.sampleIntervalSeconds = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SampleOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 sample_rate = 1; */
        if (message.sampleRate !== 0)
            writer.tag(1, WireType.Varint).uint32(message.sampleRate);
        /* uint32 sample_interval_seconds = 2; */
        if (message.sampleIntervalSeconds !== 0)
            writer.tag(2, WireType.Varint).uint32(message.sampleIntervalSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.SampleOptions
 */
export const SampleOptions = new SampleOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("protos.Config", [
            { no: 1, name: "audiences", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Audience },
            { no: 2, name: "pipelines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Pipeline },
            { no: 3, name: "notifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NotificationConfig },
            { no: 4, name: "wasm_modules", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WasmModule },
            { no: 5, name: "audience_mappings", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => PipelineConfigs } }
        ]);
    }
    create(value?: PartialMessage<Config>): Config {
        const message = { audiences: [], pipelines: [], notifications: [], wasmModules: [], audienceMappings: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated protos.Audience audiences */ 1:
                    message.audiences.push(Audience.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protos.Pipeline pipelines */ 2:
                    message.pipelines.push(Pipeline.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protos.NotificationConfig notifications */ 3:
                    message.notifications.push(NotificationConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated protos.shared.WasmModule wasm_modules */ 4:
                    message.wasmModules.push(WasmModule.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, protos.PipelineConfigs> audience_mappings */ 5:
                    this.binaryReadMap5(message.audienceMappings, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: Config["audienceMappings"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Config["audienceMappings"] | undefined, val: Config["audienceMappings"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = PipelineConfigs.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protos.Config.audience_mappings");
            }
        }
        map[key ?? ""] = val ?? PipelineConfigs.create();
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated protos.Audience audiences = 1; */
        for (let i = 0; i < message.audiences.length; i++)
            Audience.internalBinaryWrite(message.audiences[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated protos.Pipeline pipelines = 2; */
        for (let i = 0; i < message.pipelines.length; i++)
            Pipeline.internalBinaryWrite(message.pipelines[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated protos.NotificationConfig notifications = 3; */
        for (let i = 0; i < message.notifications.length; i++)
            NotificationConfig.internalBinaryWrite(message.notifications[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated protos.shared.WasmModule wasm_modules = 4; */
        for (let i = 0; i < message.wasmModules.length; i++)
            WasmModule.internalBinaryWrite(message.wasmModules[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, protos.PipelineConfigs> audience_mappings = 5; */
        for (let k of Object.keys(message.audienceMappings)) {
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            PipelineConfigs.internalBinaryWrite(message.audienceMappings[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Config
 */
export const Config = new Config$Type();
