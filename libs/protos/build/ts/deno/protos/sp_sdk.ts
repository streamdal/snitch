// @generated by protobuf-ts 2.9.0 with parameter long_type_string
// @generated from protobuf file "sp_sdk.proto" (package "protos", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AbortCondition } from "./sp_pipeline.ts";
import { Audience } from "./sp_common.ts";
/**
 * Common request used by all SDKs in their .Process() method
 *
 * @generated from protobuf message protos.SDKRequest
 */
export interface SDKRequest {
    /**
     * The input payload that the SDK will process
     *
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
    /**
     * Audience that should be announced for this request
     *
     * @generated from protobuf field: protos.Audience audience = 2;
     */
    audience?: Audience;
}
/**
 * Common return response used by all SDKs
 *
 * @generated from protobuf message protos.SDKResponse
 */
export interface SDKResponse {
    /**
     * Contains (potentially) modified input data
     *
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
    /**
     * Execution status of the last step
     *
     * @generated from protobuf field: protos.ExecStatus status = 2;
     */
    status: ExecStatus;
    /**
     * Optional message accompanying the exec status for the last step
     *
     * @generated from protobuf field: optional string status_message = 3;
     */
    statusMessage?: string;
    /**
     * An array of pipelines that the SDK executed and the status of each step
     *
     * @generated from protobuf field: repeated protos.PipelineStatus pipeline_status = 4;
     */
    pipelineStatus: PipelineStatus[];
    /**
     * Includes any metadata that the step(s) may want to pass back to the user.
     *
     * NOTE: Metadata is aggregated across all steps in the pipeline, so if two
     * steps both set a key "foo" to different values, the value of "foo" in the
     * response will be the value set by the last step in the pipeline.
     *
     * To learn more about "metadata", see SDK Spec V2 doc "Pipeline Step & Error
     * Behavior" section.
     *
     * @generated from protobuf field: map<string, string> metadata = 5;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * SDKStartupConfig is a common configuration structure that is used by all
 * Streamdal SDKs to configure the client at startup. NOTE: These are _baseline_
 * options - some SDKs may expose additional options.
 * protolint:disable FIELD_NAMES_LOWER_SNAKE_CASE
 *
 * @generated from protobuf message protos.SDKStartupConfig
 */
export interface SDKStartupConfig {
    /**
     * REQUIRED: URL for the Streamdal server gRPC API. Example: "streamdal-server-address:8082"
     *
     * @generated from protobuf field: string server_url = 1;
     */
    serverUrl: string;
    /**
     * REQUIRED: Auth token used to authenticate with the Streamdal server.
     * NOTE: should be the same as the token used for running the Streamdal server.
     *
     * @generated from protobuf field: string auth_token = 2;
     */
    authToken: string;
    /**
     * REQUIRED: Service name used for identifying the SDK client in the Streamdal
     * server and console.
     *
     * @generated from protobuf field: string service_name = 3;
     */
    serviceName: string;
    /**
     * OPTIONAL: List of audiences you can specify at registration time. This is
     * useful if you know your audiences in advance and want to populate service
     * groups in the Streamdal UI _before_ your code executes any .Process() calls.
     *
     * @generated from protobuf field: repeated protos.Audience audiences = 4;
     */
    audiences: Audience[];
    /**
     * OPTIONAL: How long to wait for a pipeline execution to complete before timing out
     *
     * @generated from protobuf field: int32 pipeline_timeout_seconds = 5;
     */
    pipelineTimeoutSeconds: number;
    /**
     * OPTIONAL: How long to wait for a step execution to complete before timing out
     *
     * @generated from protobuf field: int32 step_timeout_seconds = 6;
     */
    stepTimeoutSeconds: number;
    /**
     * OPTIONAL: Instruct the SDK to execute pipelines but return ORIGINAL input
     * payload instead of (potentially) modified payload.
     *
     * @generated from protobuf field: bool dry_run = 7;
     */
    dryRun: boolean;
    // ------------------------- Internal Settings ------------------------
    // 
    // These are "internal" settings that generally do not have to be used by the
    // SDK user.

    /**
     * ClientType specifies whether this of the SDK is used in a shim library or
     * as a standalone SDK. This information is used for both debug info and to
     * help SDKs determine whether ServerURL and ServerToken should be optional or
     * required. Unless you are developing a shim, you should not have to set this.
     * Default: SDKClientTypeSDK
     *
     * @generated from protobuf field: optional protos.SDKClientType _internal_client_type = 1000;
     */
    InternalClientType?: SDKClientType;
    // --------------------- Shim/Wrapper Library Settings ---------------------
    // 
    // "Shim" settings are _primarily_ used when the SDK is used within a shim/wrapper
    // library. Setting them outside of a shim will have no effect.
    // 
    // Read more about shims: https://docs.streamdal.com/en/core-components/libraries-shims/
    // 

    /**
     * By default, the shim will execute pipelines on every read/write call to the
     * upstream library. If this is set to true, the shim will only execute its
     * workload if the upstream library is called with a protos.SDKRuntimeConfig.
     * Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...}).
     *
     * @generated from protobuf field: bool _internal_shim_require_runtime_config = 2000;
     */
    InternalShimRequireRuntimeConfig: boolean;
    /**
     * When enabled and the shim run into any non-recoverable errors, it will
     * return the error to the upstream library. If left unset, the shim will
     * ignore the error and pass the original data back to the upstream library.
     *
     * @generated from protobuf field: bool _internal_shim_strict_error_handling = 2001;
     */
    InternalShimStrictErrorHandling: boolean;
}
/**
 * SDKRuntimeConfig is the configuration structure that is used primarily by
 * shims to configure SDK behavior at runtime. It is most often exposed as an
 * optional parameter that you can pass to an upstream library's read or write
 * operation. Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...})
 *
 * Read more about shims: https://docs.streamdal.com/en/core-components/libraries-shims/
 *
 * @generated from protobuf message protos.SDKRuntimeConfig
 */
export interface SDKRuntimeConfig {
    /**
     * Audience that will be used by shim when calling SDK.Process().
     * NOTE: If ServiceName is not provided, the shim will use the service name
     * provided in the SDKStartupConfig.
     *
     * @generated from protobuf field: protos.Audience audience = 1;
     */
    audience?: Audience;
    /**
     * Specifies how the shim should behave if it runs into any errors when
     * calling the SDK. If set, this setting will override the behavior set in
     * SDKStartupConfig._internal_shim_strict_error_handling.
     *
     * @generated from protobuf field: optional bool strict_error_handling = 2;
     */
    strictErrorHandling?: boolean;
}
/**
 * @generated from protobuf message protos.PipelineStatus
 */
export interface PipelineStatus {
    /**
     * ID of the pipeline
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * The name of the pipeline
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * The status of each step in the pipeline
     *
     * @generated from protobuf field: repeated protos.StepStatus step_status = 3;
     */
    stepStatus: StepStatus[];
}
/**
 * @generated from protobuf message protos.StepStatus
 */
export interface StepStatus {
    /**
     * The name of the step
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Execution outcome status of the step
     *
     * @generated from protobuf field: protos.ExecStatus status = 2;
     */
    status: ExecStatus;
    /**
     * Optional message accompanying the exec status
     *
     * @generated from protobuf field: optional string status_message = 3;
     */
    statusMessage?: string;
    /**
     * Indicates if current or all future pipelines were aborted.
     *
     * IMPORTANT: The SDK running into an error does not automatically abort
     * current or all future pipelines - the user must define the abort conditions
     * for "on_error".
     *
     * @generated from protobuf field: protos.AbortCondition abort_condition = 4;
     */
    abortCondition: AbortCondition;
}
/**
 * @generated from protobuf enum protos.ExecStatus
 */
export enum ExecStatus {
    /**
     * Unset status. This should never be returned by the SDK. If it does, it is
     * probably a bug (and you should file an issue)
     *
     * @generated from protobuf enum value: EXEC_STATUS_UNSET = 0;
     */
    UNSET = 0,
    /**
     * Indicates that the step execution evaluated to "true"
     *
     * @generated from protobuf enum value: EXEC_STATUS_TRUE = 1;
     */
    TRUE = 1,
    /**
     * Indicates that the step execution evaluated to "false"
     *
     * @generated from protobuf enum value: EXEC_STATUS_FALSE = 2;
     */
    FALSE = 2,
    /**
     * Indicates that the SDK encountered an error while trying to process the
     * request. Example error cases: SDK can't find the appropriate Wasm module,
     * Wasm function cannot alloc or dealloc memory, etc.
     *
     * @generated from protobuf enum value: EXEC_STATUS_ERROR = 3;
     */
    ERROR = 3
}
/**
 * Indicates whether the SDK is being used directly or via a shim/wrapper library.
 * This is primarily intended to be used by shims so that the SDK can determine
 * if the ServerURL and ServerToken should be optional or required.
 * protolint:disable ENUM_FIELD_NAMES_PREFIX
 *
 * @generated from protobuf enum protos.SDKClientType
 */
export enum SDKClientType {
    /**
     * The SDK is used directly as a standalone library
     *
     * @generated from protobuf enum value: SDK_CLIENT_TYPE_DIRECT = 0;
     */
    SDK_CLIENT_TYPE_DIRECT = 0,
    /**
     * The SDK is used within a shim/wrapper library
     *
     * @generated from protobuf enum value: SDK_CLIENT_TYPE_SHIM = 1;
     */
    SDK_CLIENT_TYPE_SHIM = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class SDKRequest$Type extends MessageType<SDKRequest> {
    constructor() {
        super("protos.SDKRequest", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "audience", kind: "message", T: () => Audience }
        ]);
    }
    create(value?: PartialMessage<SDKRequest>): SDKRequest {
        const message = { data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SDKRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SDKRequest): SDKRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* protos.Audience audience */ 2:
                    message.audience = Audience.internalBinaryRead(reader, reader.uint32(), options, message.audience);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SDKRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* protos.Audience audience = 2; */
        if (message.audience)
            Audience.internalBinaryWrite(message.audience, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.SDKRequest
 */
export const SDKRequest = new SDKRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SDKResponse$Type extends MessageType<SDKResponse> {
    constructor() {
        super("protos.SDKResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["protos.ExecStatus", ExecStatus, "EXEC_STATUS_"] },
            { no: 3, name: "status_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pipeline_status", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PipelineStatus },
            { no: 5, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<SDKResponse>): SDKResponse {
        const message = { data: new Uint8Array(0), status: 0, pipelineStatus: [], metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SDKResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SDKResponse): SDKResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* protos.ExecStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* optional string status_message */ 3:
                    message.statusMessage = reader.string();
                    break;
                case /* repeated protos.PipelineStatus pipeline_status */ 4:
                    message.pipelineStatus.push(PipelineStatus.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, string> metadata */ 5:
                    this.binaryReadMap5(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: SDKResponse["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SDKResponse["metadata"] | undefined, val: SDKResponse["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field protos.SDKResponse.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: SDKResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* protos.ExecStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* optional string status_message = 3; */
        if (message.statusMessage !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.statusMessage);
        /* repeated protos.PipelineStatus pipeline_status = 4; */
        for (let i = 0; i < message.pipelineStatus.length; i++)
            PipelineStatus.internalBinaryWrite(message.pipelineStatus[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> metadata = 5; */
        for (let k of Object.keys(message.metadata))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.SDKResponse
 */
export const SDKResponse = new SDKResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SDKStartupConfig$Type extends MessageType<SDKStartupConfig> {
    constructor() {
        super("protos.SDKStartupConfig", [
            { no: 1, name: "server_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "auth_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "service_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "audiences", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Audience },
            { no: 5, name: "pipeline_timeout_seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "step_timeout_seconds", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "dry_run", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1000, name: "_internal_client_type", kind: "enum", opt: true, T: () => ["protos.SDKClientType", SDKClientType] },
            { no: 2000, name: "_internal_shim_require_runtime_config", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2001, name: "_internal_shim_strict_error_handling", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SDKStartupConfig>): SDKStartupConfig {
        const message = { serverUrl: "", authToken: "", serviceName: "", audiences: [], pipelineTimeoutSeconds: 0, stepTimeoutSeconds: 0, dryRun: false, InternalShimRequireRuntimeConfig: false, InternalShimStrictErrorHandling: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SDKStartupConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SDKStartupConfig): SDKStartupConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string server_url */ 1:
                    message.serverUrl = reader.string();
                    break;
                case /* string auth_token */ 2:
                    message.authToken = reader.string();
                    break;
                case /* string service_name */ 3:
                    message.serviceName = reader.string();
                    break;
                case /* repeated protos.Audience audiences */ 4:
                    message.audiences.push(Audience.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 pipeline_timeout_seconds */ 5:
                    message.pipelineTimeoutSeconds = reader.int32();
                    break;
                case /* int32 step_timeout_seconds */ 6:
                    message.stepTimeoutSeconds = reader.int32();
                    break;
                case /* bool dry_run */ 7:
                    message.dryRun = reader.bool();
                    break;
                case /* optional protos.SDKClientType _internal_client_type */ 1000:
                    message.InternalClientType = reader.int32();
                    break;
                case /* bool _internal_shim_require_runtime_config */ 2000:
                    message.InternalShimRequireRuntimeConfig = reader.bool();
                    break;
                case /* bool _internal_shim_strict_error_handling */ 2001:
                    message.InternalShimStrictErrorHandling = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SDKStartupConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string server_url = 1; */
        if (message.serverUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serverUrl);
        /* string auth_token = 2; */
        if (message.authToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.authToken);
        /* string service_name = 3; */
        if (message.serviceName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.serviceName);
        /* repeated protos.Audience audiences = 4; */
        for (let i = 0; i < message.audiences.length; i++)
            Audience.internalBinaryWrite(message.audiences[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 pipeline_timeout_seconds = 5; */
        if (message.pipelineTimeoutSeconds !== 0)
            writer.tag(5, WireType.Varint).int32(message.pipelineTimeoutSeconds);
        /* int32 step_timeout_seconds = 6; */
        if (message.stepTimeoutSeconds !== 0)
            writer.tag(6, WireType.Varint).int32(message.stepTimeoutSeconds);
        /* bool dry_run = 7; */
        if (message.dryRun !== false)
            writer.tag(7, WireType.Varint).bool(message.dryRun);
        /* optional protos.SDKClientType _internal_client_type = 1000; */
        if (message.InternalClientType !== undefined)
            writer.tag(1000, WireType.Varint).int32(message.InternalClientType);
        /* bool _internal_shim_require_runtime_config = 2000; */
        if (message.InternalShimRequireRuntimeConfig !== false)
            writer.tag(2000, WireType.Varint).bool(message.InternalShimRequireRuntimeConfig);
        /* bool _internal_shim_strict_error_handling = 2001; */
        if (message.InternalShimStrictErrorHandling !== false)
            writer.tag(2001, WireType.Varint).bool(message.InternalShimStrictErrorHandling);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.SDKStartupConfig
 */
export const SDKStartupConfig = new SDKStartupConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SDKRuntimeConfig$Type extends MessageType<SDKRuntimeConfig> {
    constructor() {
        super("protos.SDKRuntimeConfig", [
            { no: 1, name: "audience", kind: "message", T: () => Audience },
            { no: 2, name: "strict_error_handling", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SDKRuntimeConfig>): SDKRuntimeConfig {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SDKRuntimeConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SDKRuntimeConfig): SDKRuntimeConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.Audience audience */ 1:
                    message.audience = Audience.internalBinaryRead(reader, reader.uint32(), options, message.audience);
                    break;
                case /* optional bool strict_error_handling */ 2:
                    message.strictErrorHandling = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SDKRuntimeConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.Audience audience = 1; */
        if (message.audience)
            Audience.internalBinaryWrite(message.audience, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool strict_error_handling = 2; */
        if (message.strictErrorHandling !== undefined)
            writer.tag(2, WireType.Varint).bool(message.strictErrorHandling);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.SDKRuntimeConfig
 */
export const SDKRuntimeConfig = new SDKRuntimeConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PipelineStatus$Type extends MessageType<PipelineStatus> {
    constructor() {
        super("protos.PipelineStatus", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "step_status", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StepStatus }
        ]);
    }
    create(value?: PartialMessage<PipelineStatus>): PipelineStatus {
        const message = { id: "", name: "", stepStatus: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PipelineStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PipelineStatus): PipelineStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated protos.StepStatus step_status */ 3:
                    message.stepStatus.push(StepStatus.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PipelineStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated protos.StepStatus step_status = 3; */
        for (let i = 0; i < message.stepStatus.length; i++)
            StepStatus.internalBinaryWrite(message.stepStatus[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.PipelineStatus
 */
export const PipelineStatus = new PipelineStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StepStatus$Type extends MessageType<StepStatus> {
    constructor() {
        super("protos.StepStatus", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["protos.ExecStatus", ExecStatus, "EXEC_STATUS_"] },
            { no: 3, name: "status_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "abort_condition", kind: "enum", T: () => ["protos.AbortCondition", AbortCondition, "ABORT_CONDITION_"] }
        ]);
    }
    create(value?: PartialMessage<StepStatus>): StepStatus {
        const message = { name: "", status: 0, abortCondition: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StepStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StepStatus): StepStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* protos.ExecStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* optional string status_message */ 3:
                    message.statusMessage = reader.string();
                    break;
                case /* protos.AbortCondition abort_condition */ 4:
                    message.abortCondition = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StepStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* protos.ExecStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* optional string status_message = 3; */
        if (message.statusMessage !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.statusMessage);
        /* protos.AbortCondition abort_condition = 4; */
        if (message.abortCondition !== 0)
            writer.tag(4, WireType.Varint).int32(message.abortCondition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.StepStatus
 */
export const StepStatus = new StepStatus$Type();
