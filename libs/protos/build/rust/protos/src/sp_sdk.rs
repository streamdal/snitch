// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sp_sdk.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Common return response used by all SDKs
// @@protoc_insertion_point(message:protos.SDKResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SDKResponse {
    // message fields
    ///  Contains (potentially) modified input data
    // @@protoc_insertion_point(field:protos.SDKResponse.data)
    pub data: ::std::vec::Vec<u8>,
    ///  Execution status of the last step
    // @@protoc_insertion_point(field:protos.SDKResponse.status)
    pub status: ::protobuf::EnumOrUnknown<ExecStatus>,
    ///  Optional message accompanying the exec status for the last step
    // @@protoc_insertion_point(field:protos.SDKResponse.status_message)
    pub status_message: ::std::option::Option<::std::string::String>,
    ///  An array of pipelines that the SDK executed and the status of each step
    // @@protoc_insertion_point(field:protos.SDKResponse.pipeline_status)
    pub pipeline_status: ::std::vec::Vec<PipelineStatus>,
    ///  Includes any metadata that the step(s) may want to pass back to the user.
    ///
    ///  NOTE: Metadata is aggregated across all steps in the pipeline, so if two
    ///  steps both set a key "foo" to different values, the value of "foo" in the
    ///  response will be the value set by the last step in the pipeline.
    ///
    ///  To learn more about "metadata", see SDK Spec V2 doc "Pipeline Step & Error
    ///  Behavior" section.
    // @@protoc_insertion_point(field:protos.SDKResponse.metadata)
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.SDKResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SDKResponse {
    fn default() -> &'a SDKResponse {
        <SDKResponse as ::protobuf::Message>::default_instance()
    }
}

impl SDKResponse {
    pub fn new() -> SDKResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &SDKResponse| { &m.data },
            |m: &mut SDKResponse| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &SDKResponse| { &m.status },
            |m: &mut SDKResponse| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status_message",
            |m: &SDKResponse| { &m.status_message },
            |m: &mut SDKResponse| { &mut m.status_message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pipeline_status",
            |m: &SDKResponse| { &m.pipeline_status },
            |m: &mut SDKResponse| { &mut m.pipeline_status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "metadata",
            |m: &SDKResponse| { &m.metadata },
            |m: &mut SDKResponse| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SDKResponse>(
            "SDKResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SDKResponse {
    const NAME: &'static str = "SDKResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = is.read_bytes()?;
                },
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.status_message = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.pipeline_status.push(is.read_message()?);
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(ExecStatus::EXEC_STATUS_UNSET) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        if let Some(v) = self.status_message.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        for value in &self.pipeline_status {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(ExecStatus::EXEC_STATUS_UNSET) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if let Some(v) = self.status_message.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.pipeline_status {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SDKResponse {
        SDKResponse::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.status = ::protobuf::EnumOrUnknown::new(ExecStatus::EXEC_STATUS_UNSET);
        self.status_message = ::std::option::Option::None;
        self.pipeline_status.clear();
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SDKResponse {
        static instance: ::protobuf::rt::Lazy<SDKResponse> = ::protobuf::rt::Lazy::new();
        instance.get(SDKResponse::new)
    }
}

impl ::protobuf::MessageFull for SDKResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SDKResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SDKResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SDKResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.PipelineStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PipelineStatus {
    // message fields
    ///  ID of the pipeline
    // @@protoc_insertion_point(field:protos.PipelineStatus.id)
    pub id: ::std::string::String,
    ///  The name of the pipeline
    // @@protoc_insertion_point(field:protos.PipelineStatus.name)
    pub name: ::std::string::String,
    ///  The status of each step in the pipeline
    // @@protoc_insertion_point(field:protos.PipelineStatus.step_status)
    pub step_status: ::std::vec::Vec<StepStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PipelineStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineStatus {
    fn default() -> &'a PipelineStatus {
        <PipelineStatus as ::protobuf::Message>::default_instance()
    }
}

impl PipelineStatus {
    pub fn new() -> PipelineStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PipelineStatus| { &m.id },
            |m: &mut PipelineStatus| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PipelineStatus| { &m.name },
            |m: &mut PipelineStatus| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "step_status",
            |m: &PipelineStatus| { &m.step_status },
            |m: &mut PipelineStatus| { &mut m.step_status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineStatus>(
            "PipelineStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineStatus {
    const NAME: &'static str = "PipelineStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.step_status.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.step_status {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.step_status {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineStatus {
        PipelineStatus::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.step_status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineStatus {
        static instance: PipelineStatus = PipelineStatus {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            step_status: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PipelineStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.StepStatus)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StepStatus {
    // message fields
    ///  The name of the step
    // @@protoc_insertion_point(field:protos.StepStatus.name)
    pub name: ::std::string::String,
    ///  Execution outcome status of the step
    // @@protoc_insertion_point(field:protos.StepStatus.status)
    pub status: ::protobuf::EnumOrUnknown<ExecStatus>,
    ///  Optional message accompanying the exec status
    // @@protoc_insertion_point(field:protos.StepStatus.status_message)
    pub status_message: ::std::option::Option<::std::string::String>,
    ///  Indicates if current or all future pipelines were aborted.
    ///
    ///  IMPORTANT: The SDK running into an error does not automatically abort
    ///  current or all future pipelines - the user must define the abort conditions
    ///  for "on_error".
    // @@protoc_insertion_point(field:protos.StepStatus.abort_condition)
    pub abort_condition: ::protobuf::EnumOrUnknown<super::sp_pipeline::AbortCondition>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.StepStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StepStatus {
    fn default() -> &'a StepStatus {
        <StepStatus as ::protobuf::Message>::default_instance()
    }
}

impl StepStatus {
    pub fn new() -> StepStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &StepStatus| { &m.name },
            |m: &mut StepStatus| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &StepStatus| { &m.status },
            |m: &mut StepStatus| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "status_message",
            |m: &StepStatus| { &m.status_message },
            |m: &mut StepStatus| { &mut m.status_message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "abort_condition",
            |m: &StepStatus| { &m.abort_condition },
            |m: &mut StepStatus| { &mut m.abort_condition },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StepStatus>(
            "StepStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StepStatus {
    const NAME: &'static str = "StepStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.status_message = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.abort_condition = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(ExecStatus::EXEC_STATUS_UNSET) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        if let Some(v) = self.status_message.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if self.abort_condition != ::protobuf::EnumOrUnknown::new(super::sp_pipeline::AbortCondition::ABORT_CONDITION_UNSET) {
            my_size += ::protobuf::rt::int32_size(4, self.abort_condition.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(ExecStatus::EXEC_STATUS_UNSET) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if let Some(v) = self.status_message.as_ref() {
            os.write_string(3, v)?;
        }
        if self.abort_condition != ::protobuf::EnumOrUnknown::new(super::sp_pipeline::AbortCondition::ABORT_CONDITION_UNSET) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.abort_condition))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StepStatus {
        StepStatus::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.status = ::protobuf::EnumOrUnknown::new(ExecStatus::EXEC_STATUS_UNSET);
        self.status_message = ::std::option::Option::None;
        self.abort_condition = ::protobuf::EnumOrUnknown::new(super::sp_pipeline::AbortCondition::ABORT_CONDITION_UNSET);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StepStatus {
        static instance: StepStatus = StepStatus {
            name: ::std::string::String::new(),
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            status_message: ::std::option::Option::None,
            abort_condition: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StepStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StepStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StepStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StepStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SDKStartupConfig is the configuration structure that is used in Streamdal SDKs
///  to configure the client at startup. Some SDKs may expose additional config
///  options aside from these baseline options.
// @@protoc_insertion_point(message:protos.SDKStartupConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SDKStartupConfig {
    // message fields
    ///  URL for the Streamdal server gRPC API. Example: "streamdal-server-address:8082"
    // @@protoc_insertion_point(field:protos.SDKStartupConfig.url)
    pub url: ::std::string::String,
    ///  Auth token used to authenticate with the Streamdal server (NOTE: should be
    ///  the same as the token used for running the Streamdal server).
    // @@protoc_insertion_point(field:protos.SDKStartupConfig.token)
    pub token: ::std::string::String,
    ///  Service name used for identifying the SDK client in the Streamdal server and console
    // @@protoc_insertion_point(field:protos.SDKStartupConfig.service_name)
    pub service_name: ::std::string::String,
    ///  How long to wait for a pipeline execution to complete before timing out
    // @@protoc_insertion_point(field:protos.SDKStartupConfig.pipeline_timeout_seconds)
    pub pipeline_timeout_seconds: ::std::option::Option<i32>,
    ///  How long to wait for a step execution to complete before timing out
    // @@protoc_insertion_point(field:protos.SDKStartupConfig.step_timeout_seconds)
    pub step_timeout_seconds: ::std::option::Option<i32>,
    ///  Instruct the SDK to execute pipelines but return ORIGINAL input payload
    ///  instead of (potentially) modified payload.
    // @@protoc_insertion_point(field:protos.SDKStartupConfig.dry_run)
    pub dry_run: ::std::option::Option<bool>,
    ///  By default, the shim will execute pipelines on every read/write call to the
    ///  upstream library. If this is set to true, the shim will only execute its
    ///  workload if the upstream library is called with a protos.SDKRuntimeConfig.
    ///  Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...}).
    // @@protoc_insertion_point(field:protos.SDKStartupConfig.shim_require_runtime_config)
    pub shim_require_runtime_config: ::std::option::Option<bool>,
    ///  Tells the SDK how to behave when it runs into an error
    // @@protoc_insertion_point(field:protos.SDKStartupConfig.shim_error_mode)
    pub shim_error_mode: ::std::option::Option<::protobuf::EnumOrUnknown<ShimErrorMode>>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.SDKStartupConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SDKStartupConfig {
    fn default() -> &'a SDKStartupConfig {
        <SDKStartupConfig as ::protobuf::Message>::default_instance()
    }
}

impl SDKStartupConfig {
    pub fn new() -> SDKStartupConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &SDKStartupConfig| { &m.url },
            |m: &mut SDKStartupConfig| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &SDKStartupConfig| { &m.token },
            |m: &mut SDKStartupConfig| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_name",
            |m: &SDKStartupConfig| { &m.service_name },
            |m: &mut SDKStartupConfig| { &mut m.service_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "pipeline_timeout_seconds",
            |m: &SDKStartupConfig| { &m.pipeline_timeout_seconds },
            |m: &mut SDKStartupConfig| { &mut m.pipeline_timeout_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "step_timeout_seconds",
            |m: &SDKStartupConfig| { &m.step_timeout_seconds },
            |m: &mut SDKStartupConfig| { &mut m.step_timeout_seconds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dry_run",
            |m: &SDKStartupConfig| { &m.dry_run },
            |m: &mut SDKStartupConfig| { &mut m.dry_run },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "shim_require_runtime_config",
            |m: &SDKStartupConfig| { &m.shim_require_runtime_config },
            |m: &mut SDKStartupConfig| { &mut m.shim_require_runtime_config },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "shim_error_mode",
            |m: &SDKStartupConfig| { &m.shim_error_mode },
            |m: &mut SDKStartupConfig| { &mut m.shim_error_mode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SDKStartupConfig>(
            "SDKStartupConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SDKStartupConfig {
    const NAME: &'static str = "SDKStartupConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_string()?;
                },
                18 => {
                    self.token = is.read_string()?;
                },
                26 => {
                    self.service_name = is.read_string()?;
                },
                32 => {
                    self.pipeline_timeout_seconds = ::std::option::Option::Some(is.read_int32()?);
                },
                40 => {
                    self.step_timeout_seconds = ::std::option::Option::Some(is.read_int32()?);
                },
                48 => {
                    self.dry_run = ::std::option::Option::Some(is.read_bool()?);
                },
                8000 => {
                    self.shim_require_runtime_config = ::std::option::Option::Some(is.read_bool()?);
                },
                8008 => {
                    self.shim_error_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token);
        }
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.service_name);
        }
        if let Some(v) = self.pipeline_timeout_seconds {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.step_timeout_seconds {
            my_size += ::protobuf::rt::int32_size(5, v);
        }
        if let Some(v) = self.dry_run {
            my_size += 1 + 1;
        }
        if let Some(v) = self.shim_require_runtime_config {
            my_size += 2 + 1;
        }
        if let Some(v) = self.shim_error_mode {
            my_size += ::protobuf::rt::int32_size(1001, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if !self.token.is_empty() {
            os.write_string(2, &self.token)?;
        }
        if !self.service_name.is_empty() {
            os.write_string(3, &self.service_name)?;
        }
        if let Some(v) = self.pipeline_timeout_seconds {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.step_timeout_seconds {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.dry_run {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.shim_require_runtime_config {
            os.write_bool(1000, v)?;
        }
        if let Some(v) = self.shim_error_mode {
            os.write_enum(1001, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SDKStartupConfig {
        SDKStartupConfig::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.token.clear();
        self.service_name.clear();
        self.pipeline_timeout_seconds = ::std::option::Option::None;
        self.step_timeout_seconds = ::std::option::Option::None;
        self.dry_run = ::std::option::Option::None;
        self.shim_require_runtime_config = ::std::option::Option::None;
        self.shim_error_mode = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SDKStartupConfig {
        static instance: SDKStartupConfig = SDKStartupConfig {
            url: ::std::string::String::new(),
            token: ::std::string::String::new(),
            service_name: ::std::string::String::new(),
            pipeline_timeout_seconds: ::std::option::Option::None,
            step_timeout_seconds: ::std::option::Option::None,
            dry_run: ::std::option::Option::None,
            shim_require_runtime_config: ::std::option::Option::None,
            shim_error_mode: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SDKStartupConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SDKStartupConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SDKStartupConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SDKStartupConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  SDKRuntimeConfig is the configuration structure that is used in SDKs to
///  configure how the SDK behaves at runtime. It is most often exposed as an
///  optional parameter that you can pass to an upstream library's read or write
///  operation. Ie. kafkaProducer.Write(data, &streamdal.SDKRuntimeConfig{...})
///
///  NOTE: This structure is usually used when the SDK is used via a shim/wrapper
///  library where you have less control over SDK behavior. Read more about shims
///  here: https://docs.streamdal.com/en/core-components/libraries-shims/
// @@protoc_insertion_point(message:protos.ShimRuntimeConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ShimRuntimeConfig {
    // message fields
    ///  Specifies how the shim should behave if it runs into any errors when calling the SDK
    // @@protoc_insertion_point(field:protos.ShimRuntimeConfig.error_mode)
    pub error_mode: ::std::option::Option<::protobuf::EnumOrUnknown<ShimErrorMode>>,
    ///  Audience that will be used by shim when calling SDK.Process()
    // @@protoc_insertion_point(field:protos.ShimRuntimeConfig.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ShimRuntimeConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ShimRuntimeConfig {
    fn default() -> &'a ShimRuntimeConfig {
        <ShimRuntimeConfig as ::protobuf::Message>::default_instance()
    }
}

impl ShimRuntimeConfig {
    pub fn new() -> ShimRuntimeConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error_mode",
            |m: &ShimRuntimeConfig| { &m.error_mode },
            |m: &mut ShimRuntimeConfig| { &mut m.error_mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &ShimRuntimeConfig| { &m.audience },
            |m: &mut ShimRuntimeConfig| { &mut m.audience },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ShimRuntimeConfig>(
            "ShimRuntimeConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ShimRuntimeConfig {
    const NAME: &'static str = "ShimRuntimeConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.error_mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.error_mode {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.error_mode {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ShimRuntimeConfig {
        ShimRuntimeConfig::new()
    }

    fn clear(&mut self) {
        self.error_mode = ::std::option::Option::None;
        self.audience.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ShimRuntimeConfig {
        static instance: ShimRuntimeConfig = ShimRuntimeConfig {
            error_mode: ::std::option::Option::None,
            audience: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ShimRuntimeConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ShimRuntimeConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ShimRuntimeConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShimRuntimeConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.ExecStatus)
pub enum ExecStatus {
    // @@protoc_insertion_point(enum_value:protos.ExecStatus.EXEC_STATUS_UNSET)
    EXEC_STATUS_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.ExecStatus.EXEC_STATUS_TRUE)
    EXEC_STATUS_TRUE = 1,
    // @@protoc_insertion_point(enum_value:protos.ExecStatus.EXEC_STATUS_FALSE)
    EXEC_STATUS_FALSE = 2,
    // @@protoc_insertion_point(enum_value:protos.ExecStatus.EXEC_STATUS_ERROR)
    EXEC_STATUS_ERROR = 3,
}

impl ::protobuf::Enum for ExecStatus {
    const NAME: &'static str = "ExecStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExecStatus> {
        match value {
            0 => ::std::option::Option::Some(ExecStatus::EXEC_STATUS_UNSET),
            1 => ::std::option::Option::Some(ExecStatus::EXEC_STATUS_TRUE),
            2 => ::std::option::Option::Some(ExecStatus::EXEC_STATUS_FALSE),
            3 => ::std::option::Option::Some(ExecStatus::EXEC_STATUS_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ExecStatus> {
        match str {
            "EXEC_STATUS_UNSET" => ::std::option::Option::Some(ExecStatus::EXEC_STATUS_UNSET),
            "EXEC_STATUS_TRUE" => ::std::option::Option::Some(ExecStatus::EXEC_STATUS_TRUE),
            "EXEC_STATUS_FALSE" => ::std::option::Option::Some(ExecStatus::EXEC_STATUS_FALSE),
            "EXEC_STATUS_ERROR" => ::std::option::Option::Some(ExecStatus::EXEC_STATUS_ERROR),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ExecStatus] = &[
        ExecStatus::EXEC_STATUS_UNSET,
        ExecStatus::EXEC_STATUS_TRUE,
        ExecStatus::EXEC_STATUS_FALSE,
        ExecStatus::EXEC_STATUS_ERROR,
    ];
}

impl ::protobuf::EnumFull for ExecStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ExecStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ExecStatus {
    fn default() -> Self {
        ExecStatus::EXEC_STATUS_UNSET
    }
}

impl ExecStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ExecStatus>("ExecStatus")
    }
}

///  ShimErrorMode is used to alter the error behavior of a shim library
///  instrumented with the Streamdal SDK at runtime.
///
///  NOTE: This structure is usually used when the SDK is used via a shim/wrapper
///  library where you have less control over SDK behavior. Read more about shims
///  here: https://docs.streamdal.com/en/core-components/libraries-shims/
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.ShimErrorMode)
pub enum ShimErrorMode {
    // @@protoc_insertion_point(enum_value:protos.ShimErrorMode.SHIM_ERROR_MODE_UNSET)
    SHIM_ERROR_MODE_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.ShimErrorMode.SHIM_ERROR_MODE_STRICT)
    SHIM_ERROR_MODE_STRICT = 1,
}

impl ::protobuf::Enum for ShimErrorMode {
    const NAME: &'static str = "ShimErrorMode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ShimErrorMode> {
        match value {
            0 => ::std::option::Option::Some(ShimErrorMode::SHIM_ERROR_MODE_UNSET),
            1 => ::std::option::Option::Some(ShimErrorMode::SHIM_ERROR_MODE_STRICT),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ShimErrorMode> {
        match str {
            "SHIM_ERROR_MODE_UNSET" => ::std::option::Option::Some(ShimErrorMode::SHIM_ERROR_MODE_UNSET),
            "SHIM_ERROR_MODE_STRICT" => ::std::option::Option::Some(ShimErrorMode::SHIM_ERROR_MODE_STRICT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ShimErrorMode] = &[
        ShimErrorMode::SHIM_ERROR_MODE_UNSET,
        ShimErrorMode::SHIM_ERROR_MODE_STRICT,
    ];
}

impl ::protobuf::EnumFull for ShimErrorMode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ShimErrorMode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ShimErrorMode {
    fn default() -> Self {
        ShimErrorMode::SHIM_ERROR_MODE_UNSET
    }
}

impl ShimErrorMode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ShimErrorMode>("ShimErrorMode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0csp_sdk.proto\x12\x06protos\x1a\x0fsp_common.proto\x1a\x11sp_pipeli\
    ne.proto\"\xc9\x02\n\x0bSDKResponse\x12\x12\n\x04data\x18\x01\x20\x01(\
    \x0cR\x04data\x12*\n\x06status\x18\x02\x20\x01(\x0e2\x12.protos.ExecStat\
    usR\x06status\x12*\n\x0estatus_message\x18\x03\x20\x01(\tH\0R\rstatusMes\
    sage\x88\x01\x01\x12?\n\x0fpipeline_status\x18\x04\x20\x03(\x0b2\x16.pro\
    tos.PipelineStatusR\x0epipelineStatus\x12=\n\x08metadata\x18\x05\x20\x03\
    (\x0b2!.protos.SDKResponse.MetadataEntryR\x08metadata\x1a;\n\rMetadataEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01B\x11\n\x0f_status_message\"i\n\x0ePi\
    pelineStatus\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\
    \x18\x02\x20\x01(\tR\x04name\x123\n\x0bstep_status\x18\x03\x20\x03(\x0b2\
    \x12.protos.StepStatusR\nstepStatus\"\xcc\x01\n\nStepStatus\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x12*\n\x06status\x18\x02\x20\x01(\
    \x0e2\x12.protos.ExecStatusR\x06status\x12*\n\x0estatus_message\x18\x03\
    \x20\x01(\tH\0R\rstatusMessage\x88\x01\x01\x12?\n\x0fabort_condition\x18\
    \x04\x20\x01(\x0e2\x16.protos.AbortConditionR\x0eabortConditionB\x11\n\
    \x0f_status_message\"\xf1\x03\n\x10SDKStartupConfig\x12\x10\n\x03url\x18\
    \x01\x20\x01(\tR\x03url\x12\x14\n\x05token\x18\x02\x20\x01(\tR\x05token\
    \x12!\n\x0cservice_name\x18\x03\x20\x01(\tR\x0bserviceName\x12=\n\x18pip\
    eline_timeout_seconds\x18\x04\x20\x01(\x05H\0R\x16pipelineTimeoutSeconds\
    \x88\x01\x01\x125\n\x14step_timeout_seconds\x18\x05\x20\x01(\x05H\x01R\
    \x12stepTimeoutSeconds\x88\x01\x01\x12\x1c\n\x07dry_run\x18\x06\x20\x01(\
    \x08H\x02R\x06dryRun\x88\x01\x01\x12C\n\x1bshim_require_runtime_config\
    \x18\xe8\x07\x20\x01(\x08H\x03R\x18shimRequireRuntimeConfig\x88\x01\x01\
    \x12C\n\x0fshim_error_mode\x18\xe9\x07\x20\x01(\x0e2\x15.protos.ShimErro\
    rModeH\x04R\rshimErrorMode\x88\x01\x01B\x1b\n\x19_pipeline_timeout_secon\
    dsB\x17\n\x15_step_timeout_secondsB\n\n\x08_dry_runB\x1e\n\x1c_shim_requ\
    ire_runtime_configB\x12\n\x10_shim_error_mode\"\x9d\x01\n\x11ShimRuntime\
    Config\x129\n\nerror_mode\x18\x01\x20\x01(\x0e2\x15.protos.ShimErrorMode\
    H\0R\terrorMode\x88\x01\x01\x121\n\x08audience\x18\x02\x20\x01(\x0b2\x10\
    .protos.AudienceH\x01R\x08audience\x88\x01\x01B\r\n\x0b_error_modeB\x0b\
    \n\t_audience*g\n\nExecStatus\x12\x15\n\x11EXEC_STATUS_UNSET\x10\0\x12\
    \x14\n\x10EXEC_STATUS_TRUE\x10\x01\x12\x15\n\x11EXEC_STATUS_FALSE\x10\
    \x02\x12\x15\n\x11EXEC_STATUS_ERROR\x10\x03*F\n\rShimErrorMode\x12\x19\n\
    \x15SHIM_ERROR_MODE_UNSET\x10\0\x12\x1a\n\x16SHIM_ERROR_MODE_STRICT\x10\
    \x01B<Z:github.com/streamdal/streamdal/libs/protos/build/go/protosJ\xd27\
    \n\x07\x12\x05\0\0\xac\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\x04\0\x19\n\t\n\x02\
    \x03\x01\x12\x03\x05\0\x1b\n\x08\n\x01\x08\x12\x03\x07\0Q\n\t\n\x02\x08\
    \x0b\x12\x03\x07\0Q\n\n\n\x02\x05\0\x12\x04\t\0\x18\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\t\x05\x0f\n\x87\x01\n\x04\x05\0\x02\0\x12\x03\x0c\x02\x18\
    \x1az\x20Unset\x20status.\x20This\x20should\x20never\x20be\x20returned\
    \x20by\x20the\x20SDK.\x20If\x20it\x20does,\x20it\x20is\n\x20probably\x20\
    a\x20bug\x20(and\x20you\x20should\x20file\x20an\x20issue)\n\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\x0c\x02\x13\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    \x0c\x16\x17\nD\n\x04\x05\0\x02\x01\x12\x03\x0f\x02\x17\x1a7\x20Indicate\
    s\x20that\x20the\x20step\x20execution\x20evaluated\x20to\x20\"true\"\n\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0f\x02\x12\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03\x0f\x15\x16\nE\n\x04\x05\0\x02\x02\x12\x03\x12\x02\x18\
    \x1a8\x20Indicates\x20that\x20the\x20step\x20execution\x20evaluated\x20t\
    o\x20\"false\"\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x12\x02\x13\n\x0c\
    \n\x05\x05\0\x02\x02\x02\x12\x03\x12\x16\x17\n\xd6\x01\n\x04\x05\0\x02\
    \x03\x12\x03\x17\x02\x18\x1a\xc8\x01\x20Indicates\x20that\x20the\x20SDK\
    \x20encountered\x20an\x20error\x20while\x20trying\x20to\x20process\x20th\
    e\n\x20request.\x20Example\x20error\x20cases:\x20SDK\x20can't\x20find\
    \x20the\x20appropriate\x20Wasm\x20module,\n\x20Wasm\x20function\x20canno\
    t\x20alloc\x20or\x20dealloc\x20memory,\x20etc.\n\n\x0c\n\x05\x05\0\x02\
    \x03\x01\x12\x03\x17\x02\x13\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x17\
    \x16\x17\n5\n\x02\x04\0\x12\x04\x1b\01\x01\x1a)\x20Common\x20return\x20r\
    esponse\x20used\x20by\x20all\x20SDKs\n\n\n\n\x03\x04\0\x01\x12\x03\x1b\
    \x08\x13\n9\n\x04\x04\0\x02\0\x12\x03\x1d\x02\x11\x1a,\x20Contains\x20(p\
    otentially)\x20modified\x20input\x20data\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x1d\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1d\x08\x0c\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1d\x0f\x10\n0\n\x04\x04\0\x02\x01\
    \x12\x03\x20\x02\x18\x1a#\x20Execution\x20status\x20of\x20the\x20last\
    \x20step\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x20\x02\x0c\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x20\r\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x20\x16\x17\nN\n\x04\x04\0\x02\x02\x12\x03#\x02%\x1aA\x20Optional\
    \x20message\x20accompanying\x20the\x20exec\x20status\x20for\x20the\x20la\
    st\x20step\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03#\x02\n\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03#\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03#\x12\x20\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03##$\nV\n\x04\x04\0\
    \x02\x03\x12\x03&\x02.\x1aI\x20An\x20array\x20of\x20pipelines\x20that\
    \x20the\x20SDK\x20executed\x20and\x20the\x20status\x20of\x20each\x20step\
    \n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03&\x02\n\n\x0c\n\x05\x04\0\x02\
    \x03\x06\x12\x03&\x0b\x19\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03&\x1a)\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03&,-\n\x92\x03\n\x04\x04\0\x02\x04\
    \x12\x030\x02#\x1a\x84\x03\x20Includes\x20any\x20metadata\x20that\x20the\
    \x20step(s)\x20may\x20want\x20to\x20pass\x20back\x20to\x20the\x20user.\n\
    \n\x20NOTE:\x20Metadata\x20is\x20aggregated\x20across\x20all\x20steps\
    \x20in\x20the\x20pipeline,\x20so\x20if\x20two\n\x20steps\x20both\x20set\
    \x20a\x20key\x20\"foo\"\x20to\x20different\x20values,\x20the\x20value\
    \x20of\x20\"foo\"\x20in\x20the\n\x20response\x20will\x20be\x20the\x20val\
    ue\x20set\x20by\x20the\x20last\x20step\x20in\x20the\x20pipeline.\n\n\x20\
    To\x20learn\x20more\x20about\x20\"metadata\",\x20see\x20SDK\x20Spec\x20V\
    2\x20doc\x20\"Pipeline\x20Step\x20&\x20Error\n\x20Behavior\"\x20section.\
    \n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x030\x02\x15\n\x0c\n\x05\x04\0\x02\
    \x04\x01\x12\x030\x16\x1e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x030!\"\n\n\
    \n\x02\x04\x01\x12\x043\0<\x01\n\n\n\x03\x04\x01\x01\x12\x033\x08\x16\n!\
    \n\x04\x04\x01\x02\0\x12\x035\x02\x10\x1a\x14\x20ID\x20of\x20the\x20pipe\
    line\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x035\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x035\x0e\
    \x0f\n'\n\x04\x04\x01\x02\x01\x12\x038\x02\x12\x1a\x1a\x20The\x20name\
    \x20of\x20the\x20pipeline\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x038\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x038\t\r\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x038\x10\x11\n6\n\x04\x04\x01\x02\x02\x12\x03;\x02&\x1a\
    )\x20The\x20status\x20of\x20each\x20step\x20in\x20the\x20pipeline\n\n\
    \x0c\n\x05\x04\x01\x02\x02\x04\x12\x03;\x02\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x06\x12\x03;\x0b\x15\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03;\x16!\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03;$%\n\n\n\x02\x04\x02\x12\x04>\0\
    N\x01\n\n\n\x03\x04\x02\x01\x12\x03>\x08\x12\n#\n\x04\x04\x02\x02\0\x12\
    \x03@\x02\x12\x1a\x16\x20The\x20name\x20of\x20the\x20step\n\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03@\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03@\x10\x11\n3\n\x04\x04\
    \x02\x02\x01\x12\x03C\x02\x18\x1a&\x20Execution\x20outcome\x20status\x20\
    of\x20the\x20step\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03C\x02\x0c\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03C\r\x13\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03C\x16\x17\n<\n\x04\x04\x02\x02\x02\x12\x03F\x02%\x1a/\
    \x20Optional\x20message\x20accompanying\x20the\x20exec\x20status\n\n\x0c\
    \n\x05\x04\x02\x02\x02\x04\x12\x03F\x02\n\n\x0c\n\x05\x04\x02\x02\x02\
    \x05\x12\x03F\x0b\x11\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03F\x12\x20\n\
    \x0c\n\x05\x04\x02\x02\x02\x03\x12\x03F#$\n\xf0\x01\n\x04\x04\x02\x02\
    \x03\x12\x03M\x02%\x1a\xe2\x01\x20Indicates\x20if\x20current\x20or\x20al\
    l\x20future\x20pipelines\x20were\x20aborted.\n\n\x20IMPORTANT:\x20The\
    \x20SDK\x20running\x20into\x20an\x20error\x20does\x20not\x20automaticall\
    y\x20abort\n\x20current\x20or\x20all\x20future\x20pipelines\x20-\x20the\
    \x20user\x20must\x20define\x20the\x20abort\x20conditions\n\x20for\x20\"o\
    n_error\".\n\n\x0c\n\x05\x04\x02\x02\x03\x06\x12\x03M\x02\x10\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03M\x11\x20\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03M#$\n\xd5\x01\n\x02\x04\x03\x12\x04S\0x\x01\x1a\xc8\x01\x20S\
    DKStartupConfig\x20is\x20the\x20configuration\x20structure\x20that\x20is\
    \x20used\x20in\x20Streamdal\x20SDKs\n\x20to\x20configure\x20the\x20clien\
    t\x20at\x20startup.\x20Some\x20SDKs\x20may\x20expose\x20additional\x20co\
    nfig\n\x20options\x20aside\x20from\x20these\x20baseline\x20options.\n\n\
    \n\n\x03\x04\x03\x01\x12\x03S\x08\x18\n^\n\x04\x04\x03\x02\0\x12\x03U\
    \x02\x11\x1aQ\x20URL\x20for\x20the\x20Streamdal\x20server\x20gRPC\x20API\
    .\x20Example:\x20\"streamdal-server-address:8082\"\n\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03U\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03U\t\x0c\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03U\x0f\x10\n\x99\x01\n\x04\x04\x03\
    \x02\x01\x12\x03Y\x02\x13\x1a\x8b\x01\x20Auth\x20token\x20used\x20to\x20\
    authenticate\x20with\x20the\x20Streamdal\x20server\x20(NOTE:\x20should\
    \x20be\n\x20the\x20same\x20as\x20the\x20token\x20used\x20for\x20running\
    \x20the\x20Streamdal\x20server).\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x03Y\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03Y\t\x0e\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03Y\x11\x12\nc\n\x04\x04\x03\x02\x02\x12\x03\\\
    \x02\x1a\x1aV\x20Service\x20name\x20used\x20for\x20identifying\x20the\
    \x20SDK\x20client\x20in\x20the\x20Streamdal\x20server\x20and\x20console\
    \n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\\\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\x02\x01\x12\x03\\\t\x15\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\\\
    \x18\x19\nV\n\x04\x04\x03\x02\x03\x12\x03_\x02.\x1aI\x20How\x20long\x20t\
    o\x20wait\x20for\x20a\x20pipeline\x20execution\x20to\x20complete\x20befo\
    re\x20timing\x20out\n\n\x0c\n\x05\x04\x03\x02\x03\x04\x12\x03_\x02\n\n\
    \x0c\n\x05\x04\x03\x02\x03\x05\x12\x03_\x0b\x10\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x03_\x11)\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03_,-\nR\n\
    \x04\x04\x03\x02\x04\x12\x03b\x02*\x1aE\x20How\x20long\x20to\x20wait\x20\
    for\x20a\x20step\x20execution\x20to\x20complete\x20before\x20timing\x20o\
    ut\n\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03b\x02\n\n\x0c\n\x05\x04\x03\
    \x02\x04\x05\x12\x03b\x0b\x10\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03b\
    \x11%\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03b()\n\x82\x01\n\x04\x04\x03\
    \x02\x05\x12\x03f\x02\x1c\x1au\x20Instruct\x20the\x20SDK\x20to\x20execut\
    e\x20pipelines\x20but\x20return\x20ORIGINAL\x20input\x20payload\n\x20ins\
    tead\x20of\x20(potentially)\x20modified\x20payload.\n\n\x0c\n\x05\x04\
    \x03\x02\x05\x04\x12\x03f\x02\n\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03f\
    \x0b\x0f\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03f\x10\x17\n\x0c\n\x05\
    \x04\x03\x02\x05\x03\x12\x03f\x1a\x1b\n\xe8\x04\n\x04\x04\x03\x02\x06\
    \x12\x03t\x023\x1a\xa5\x02\x20By\x20default,\x20the\x20shim\x20will\x20e\
    xecute\x20pipelines\x20on\x20every\x20read/write\x20call\x20to\x20the\n\
    \x20upstream\x20library.\x20If\x20this\x20is\x20set\x20to\x20true,\x20th\
    e\x20shim\x20will\x20only\x20execute\x20its\n\x20workload\x20if\x20the\
    \x20upstream\x20library\x20is\x20called\x20with\x20a\x20protos.SDKRuntim\
    eConfig.\n\x20Ie.\x20kafkaProducer.Write(data,\x20&streamdal.SDKRuntimeC\
    onfig{...}).\n2\xb2\x02\x20---------------------\x20Shim/Wrapper\x20Libr\
    ary\x20Settings\x20--------------------\n\n\x20These\x20settings\x20are\
    \x20_primarily_\x20used\x20when\x20the\x20SDK\x20is\x20used\x20within\
    \x20a\x20shim/wrapper\x20library.\n\x20Setting\x20them\x20outside\x20of\
    \x20a\x20shim\x20will\x20have\x20no\x20effect.\n\n\x20Read\x20more\x20ab\
    out\x20shims:\x20https://docs.streamdal.com/en/core-components/libraries\
    -shims/\n\n\n\x0c\n\x05\x04\x03\x02\x06\x04\x12\x03t\x02\n\n\x0c\n\x05\
    \x04\x03\x02\x06\x05\x12\x03t\x0b\x0f\n\x0c\n\x05\x04\x03\x02\x06\x01\
    \x12\x03t\x10+\n\x0c\n\x05\x04\x03\x02\x06\x03\x12\x03t.2\nE\n\x04\x04\
    \x03\x02\x07\x12\x03w\x020\x1a8\x20Tells\x20the\x20SDK\x20how\x20to\x20b\
    ehave\x20when\x20it\x20runs\x20into\x20an\x20error\n\n\x0c\n\x05\x04\x03\
    \x02\x07\x04\x12\x03w\x02\n\n\x0c\n\x05\x04\x03\x02\x07\x06\x12\x03w\x0b\
    \x18\n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x03w\x19(\n\x0c\n\x05\x04\x03\
    \x02\x07\x03\x12\x03w+/\n\xe8\x02\n\x02\x05\x01\x12\x06\x80\x01\0\x9c\
    \x01\x01\x1a\xd9\x02\x20ShimErrorMode\x20is\x20used\x20to\x20alter\x20th\
    e\x20error\x20behavior\x20of\x20a\x20shim\x20library\n\x20instrumented\
    \x20with\x20the\x20Streamdal\x20SDK\x20at\x20runtime.\n\n\x20NOTE:\x20Th\
    is\x20structure\x20is\x20usually\x20used\x20when\x20the\x20SDK\x20is\x20\
    used\x20via\x20a\x20shim/wrapper\n\x20library\x20where\x20you\x20have\
    \x20less\x20control\x20over\x20SDK\x20behavior.\x20Read\x20more\x20about\
    \x20shims\n\x20here:\x20https://docs.streamdal.com/en/core-components/li\
    braries-shims/\n\n\x0b\n\x03\x05\x01\x01\x12\x04\x80\x01\x05\x12\n\xf6\
    \x07\n\x04\x05\x01\x02\0\x12\x04\x96\x01\x02\x1c\x1a\xe7\x07\x20This\x20\
    instructs\x20the\x20shim\x20to\x20IGNORE\x20any\x20non-recoverable\x20er\
    rors\x20that\x20the\x20SDK\n\x20might\x20run\x20into.\x20If\x20the\x20SD\
    K\x20runs\x20into\x20an\x20error,\x20the\x20shim\x20will\x20NOT\x20pass\
    \x20the\n\x20error\x20back\x20to\x20the\x20user\x20-\x20it\x20will\x20in\
    stead\x20return\x20the\x20whatever\x20the\x20upstream\n\x20library\x20wo\
    uld\x20normally\x20return\x20to\x20the\x20user.\n\n\x20***\x20This\x20is\
    \x20the\x20default\x20behavior\x20***\n\n\x20Example\x20with\x20Redis\
    \x20Shim\n\x20------------------------\n\x20Under\x20normal\x20condition\
    s,\x20a\x20Redis\x20shim\x20would\x20work\x20in\x20the\x20following\x20w\
    ay\x20when\n\x20user\x20is\x20performing\x20a\x20read\x20operation:\n\n\
    \x201.\x20The\x20shim\x20would\x20call\x20the\x20upstream\x20Redis\x20li\
    brary\x20to\x20perform\x20the\x20read\x20operation\n\x202.\x20Upstream\
    \x20library\x20returns\x20results\x20to\x20the\x20shim\n\x203.\x20Shim\
    \x20passes\x20the\x20result\x20to\x20the\x20integrated\x20Streamdal\x20S\
    DK\x20for\x20processing\n\x204.\x20SDK\x20returns\x20(potentially)\x20mo\
    dified\x20data\x20to\x20the\x20shim\n\x205.\x20Shim\x20returns\x20the\
    \x20modified\x20data\x20to\x20the\x20user\n\n\x20This\x20setting\x20tell\
    s\x20the\x20shim\x20that\x20IF\x20it\x20runs\x20into\x20a\x20non-recover\
    able\x20error\n\x20while\x20calling\x20the\x20SDK\x20(step\x203),\x20it\
    \x20will\x20side-step\x20steps\x204\x20and\x205\x20and\x20instead\n\x20r\
    eturn\x20the\x20_original_\x20payload\x20(read\x20during\x20step\x201)\
    \x20to\x20the\x20user.\n\n\r\n\x05\x05\x01\x02\0\x01\x12\x04\x96\x01\x02\
    \x17\n\r\n\x05\x05\x01\x02\0\x02\x12\x04\x96\x01\x1a\x1b\n\xed\x01\n\x04\
    \x05\x01\x02\x01\x12\x04\x9b\x01\x02\x1d\x1a\xde\x01\x20This\x20instruct\
    s\x20the\x20shim\x20to\x20ABORT\x20execution\x20if\x20the\x20SDK\x20runs\
    \x20into\x20any\n\x20non-recoverable\x20errors.\x20Upon\x20aborting,\x20\
    the\x20shim\x20will\x20return\x20the\x20error\x20that\n\x20the\x20SDK\
    \x20ran\x20into\x20and\x20the\x20error\x20will\x20be\x20passed\x20all\
    \x20the\x20way\x20back\x20to\x20the\x20user.\n\n\r\n\x05\x05\x01\x02\x01\
    \x01\x12\x04\x9b\x01\x02\x18\n\r\n\x05\x05\x01\x02\x01\x02\x12\x04\x9b\
    \x01\x1b\x1c\n\x9e\x04\n\x02\x04\x04\x12\x06\xa6\x01\0\xac\x01\x01\x1a\
    \x8f\x04\x20SDKRuntimeConfig\x20is\x20the\x20configuration\x20structure\
    \x20that\x20is\x20used\x20in\x20SDKs\x20to\n\x20configure\x20how\x20the\
    \x20SDK\x20behaves\x20at\x20runtime.\x20It\x20is\x20most\x20often\x20exp\
    osed\x20as\x20an\n\x20optional\x20parameter\x20that\x20you\x20can\x20pas\
    s\x20to\x20an\x20upstream\x20library's\x20read\x20or\x20write\n\x20opera\
    tion.\x20Ie.\x20kafkaProducer.Write(data,\x20&streamdal.SDKRuntimeConfig\
    {...})\n\n\x20NOTE:\x20This\x20structure\x20is\x20usually\x20used\x20whe\
    n\x20the\x20SDK\x20is\x20used\x20via\x20a\x20shim/wrapper\n\x20library\
    \x20where\x20you\x20have\x20less\x20control\x20over\x20SDK\x20behavior.\
    \x20Read\x20more\x20about\x20shims\n\x20here:\x20https://docs.streamdal.\
    com/en/core-components/libraries-shims/\n\n\x0b\n\x03\x04\x04\x01\x12\
    \x04\xa6\x01\x08\x19\nd\n\x04\x04\x04\x02\0\x12\x04\xa8\x01\x02(\x1aV\
    \x20Specifies\x20how\x20the\x20shim\x20should\x20behave\x20if\x20it\x20r\
    uns\x20into\x20any\x20errors\x20when\x20calling\x20the\x20SDK\n\n\r\n\
    \x05\x04\x04\x02\0\x04\x12\x04\xa8\x01\x02\n\n\r\n\x05\x04\x04\x02\0\x06\
    \x12\x04\xa8\x01\x0b\x18\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xa8\x01\x19\
    #\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xa8\x01&'\nM\n\x04\x04\x04\x02\x01\
    \x12\x04\xab\x01\x02(\x1a?\x20Audience\x20that\x20will\x20be\x20used\x20\
    by\x20shim\x20when\x20calling\x20SDK.Process()\n\n\r\n\x05\x04\x04\x02\
    \x01\x04\x12\x04\xab\x01\x02\n\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\xab\
    \x01\x0b\x1a\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\xab\x01\x1b#\n\r\n\
    \x05\x04\x04\x02\x01\x03\x12\x04\xab\x01&'b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::sp_common::file_descriptor().clone());
            deps.push(super::sp_pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(SDKResponse::generated_message_descriptor_data());
            messages.push(PipelineStatus::generated_message_descriptor_data());
            messages.push(StepStatus::generated_message_descriptor_data());
            messages.push(SDKStartupConfig::generated_message_descriptor_data());
            messages.push(ShimRuntimeConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(ExecStatus::generated_enum_descriptor_data());
            enums.push(ShimErrorMode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
