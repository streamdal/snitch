// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sp_pipeline.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Pipeline is a structure that holds one or more pipeline steps. This structure
///  is intended to be immutable; clients are expected to generate WASMRequest's
///  that contain a pipeline step.
// @@protoc_insertion_point(message:protos.Pipeline)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Pipeline {
    // message fields
    ///  ID should NOT be set by external gRPC client on CreatePipelineRequest - it
    ///  will be ignored; it _does_ need to be set on UpdatePipelineRequest.
    // @@protoc_insertion_point(field:protos.Pipeline.id)
    pub id: ::std::string::String,
    ///  Friendly name for the pipeline
    // @@protoc_insertion_point(field:protos.Pipeline.name)
    pub name: ::std::string::String,
    ///  One or more steps to execute
    // @@protoc_insertion_point(field:protos.Pipeline.steps)
    pub steps: ::std::vec::Vec<PipelineStep>,
    ///  Notification configs for this pipeline. Only filled out
    ///  in external API responses
    // @@protoc_insertion_point(field:protos.Pipeline._notification_configs)
    pub _notification_configs: ::std::vec::Vec<super::sp_notify::NotificationConfig>,
    ///  Indicates whether the pipeline is paused or not. Used internally by server.
    // @@protoc_insertion_point(field:protos.Pipeline._paused)
    pub _paused: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Pipeline.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Pipeline {
    fn default() -> &'a Pipeline {
        <Pipeline as ::protobuf::Message>::default_instance()
    }
}

impl Pipeline {
    pub fn new() -> Pipeline {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Pipeline| { &m.id },
            |m: &mut Pipeline| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Pipeline| { &m.name },
            |m: &mut Pipeline| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "steps",
            |m: &Pipeline| { &m.steps },
            |m: &mut Pipeline| { &mut m.steps },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "_notification_configs",
            |m: &Pipeline| { &m._notification_configs },
            |m: &mut Pipeline| { &mut m._notification_configs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_paused",
            |m: &Pipeline| { &m._paused },
            |m: &mut Pipeline| { &mut m._paused },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pipeline>(
            "Pipeline",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Pipeline {
    const NAME: &'static str = "Pipeline";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.steps.push(is.read_message()?);
                },
                34 => {
                    self._notification_configs.push(is.read_message()?);
                },
                8000 => {
                    self._paused = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.steps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self._notification_configs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self._paused {
            my_size += 2 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.steps {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self._notification_configs {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self._paused {
            os.write_bool(1000, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Pipeline {
        Pipeline::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.steps.clear();
        self._notification_configs.clear();
        self._paused = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Pipeline {
        static instance: Pipeline = Pipeline {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            steps: ::std::vec::Vec::new(),
            _notification_configs: ::std::vec::Vec::new(),
            _paused: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Pipeline {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Pipeline").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Pipeline {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pipeline {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Conditions define how the SDK should handle a Wasm response in a step.
///  Should it continue executing the pipeline, should it abort, should it notify
///  and on_error.
// @@protoc_insertion_point(message:protos.PipelineStepConditions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PipelineStepConditions {
    // message fields
    ///  Should we abort execution?
    // @@protoc_insertion_point(field:protos.PipelineStepConditions.abort)
    pub abort: ::protobuf::EnumOrUnknown<AbortCondition>,
    ///  Should we trigger a notification?
    // @@protoc_insertion_point(field:protos.PipelineStepConditions.notify)
    pub notify: bool,
    ///  Should we include additional metadata that SDK should pass back to user?
    // @@protoc_insertion_point(field:protos.PipelineStepConditions.metadata)
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PipelineStepConditions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineStepConditions {
    fn default() -> &'a PipelineStepConditions {
        <PipelineStepConditions as ::protobuf::Message>::default_instance()
    }
}

impl PipelineStepConditions {
    pub fn new() -> PipelineStepConditions {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "abort",
            |m: &PipelineStepConditions| { &m.abort },
            |m: &mut PipelineStepConditions| { &mut m.abort },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "notify",
            |m: &PipelineStepConditions| { &m.notify },
            |m: &mut PipelineStepConditions| { &mut m.notify },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "metadata",
            |m: &PipelineStepConditions| { &m.metadata },
            |m: &mut PipelineStepConditions| { &mut m.metadata },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineStepConditions>(
            "PipelineStepConditions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineStepConditions {
    const NAME: &'static str = "PipelineStepConditions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.abort = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.notify = is.read_bool()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.metadata.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.abort != ::protobuf::EnumOrUnknown::new(AbortCondition::ABORT_CONDITION_UNSET) {
            my_size += ::protobuf::rt::int32_size(1, self.abort.value());
        }
        if self.notify != false {
            my_size += 1 + 1;
        }
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.abort != ::protobuf::EnumOrUnknown::new(AbortCondition::ABORT_CONDITION_UNSET) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.abort))?;
        }
        if self.notify != false {
            os.write_bool(2, self.notify)?;
        }
        for (k, v) in &self.metadata {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineStepConditions {
        PipelineStepConditions::new()
    }

    fn clear(&mut self) {
        self.abort = ::protobuf::EnumOrUnknown::new(AbortCondition::ABORT_CONDITION_UNSET);
        self.notify = false;
        self.metadata.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineStepConditions {
        static instance: ::protobuf::rt::Lazy<PipelineStepConditions> = ::protobuf::rt::Lazy::new();
        instance.get(PipelineStepConditions::new)
    }
}

impl ::protobuf::MessageFull for PipelineStepConditions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineStepConditions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineStepConditions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineStepConditions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  A pipeline step is a single step in a pipeline.
// @@protoc_insertion_point(message:protos.PipelineStep)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PipelineStep {
    // message fields
    ///  Friendly name for the step
    // @@protoc_insertion_point(field:protos.PipelineStep.name)
    pub name: ::std::string::String,
    ///  SDKs should read this when Wasm returns 'true' to determine what to do next.
    // @@protoc_insertion_point(field:protos.PipelineStep.on_true)
    pub on_true: ::protobuf::MessageField<PipelineStepConditions>,
    ///  SDKs should read this when Wasm returns 'false' to determine what to do next.
    // @@protoc_insertion_point(field:protos.PipelineStep.on_false)
    pub on_false: ::protobuf::MessageField<PipelineStepConditions>,
    ///  Indicates whether to use the results from a previous step as input to this step
    // @@protoc_insertion_point(field:protos.PipelineStep.dynamic)
    pub dynamic: bool,
    ///  SDKs should read this when Wasm returns 'error' to determine what to do next.
    // @@protoc_insertion_point(field:protos.PipelineStep.on_error)
    pub on_error: ::protobuf::MessageField<PipelineStepConditions>,
    ///  ID is a uuid(sha256(_wasm_bytes)) that is set by server
    // @@protoc_insertion_point(field:protos.PipelineStep._wasm_id)
    pub _wasm_id: ::std::option::Option<::std::string::String>,
    ///  WASM module bytes (set by server)
    // @@protoc_insertion_point(field:protos.PipelineStep._wasm_bytes)
    pub _wasm_bytes: ::std::option::Option<::std::vec::Vec<u8>>,
    ///  WASM function name to execute (set by server)
    // @@protoc_insertion_point(field:protos.PipelineStep._wasm_function)
    pub _wasm_function: ::std::option::Option<::std::string::String>,
    // message oneof groups
    pub step: ::std::option::Option<pipeline_step::Step>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PipelineStep.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineStep {
    fn default() -> &'a PipelineStep {
        <PipelineStep as ::protobuf::Message>::default_instance()
    }
}

impl PipelineStep {
    pub fn new() -> PipelineStep {
        ::std::default::Default::default()
    }

    // .protos.steps.DetectiveStep detective = 1000;

    pub fn detective(&self) -> &super::sp_steps_detective::DetectiveStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Detective(ref v)) => v,
            _ => <super::sp_steps_detective::DetectiveStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_detective(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_detective(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Detective(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_detective(&mut self, v: super::sp_steps_detective::DetectiveStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Detective(v))
    }

    // Mutable pointer to the field.
    pub fn mut_detective(&mut self) -> &mut super::sp_steps_detective::DetectiveStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Detective(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Detective(super::sp_steps_detective::DetectiveStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Detective(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_detective(&mut self) -> super::sp_steps_detective::DetectiveStep {
        if self.has_detective() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Detective(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_detective::DetectiveStep::new()
        }
    }

    // .protos.steps.TransformStep transform = 1001;

    pub fn transform(&self) -> &super::sp_steps_transform::TransformStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Transform(ref v)) => v,
            _ => <super::sp_steps_transform::TransformStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_transform(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_transform(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Transform(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transform(&mut self, v: super::sp_steps_transform::TransformStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Transform(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transform(&mut self) -> &mut super::sp_steps_transform::TransformStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Transform(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Transform(super::sp_steps_transform::TransformStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Transform(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transform(&mut self) -> super::sp_steps_transform::TransformStep {
        if self.has_transform() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Transform(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_transform::TransformStep::new()
        }
    }

    // .protos.steps.EncodeStep encode = 1002;

    pub fn encode(&self) -> &super::sp_steps_encode::EncodeStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Encode(ref v)) => v,
            _ => <super::sp_steps_encode::EncodeStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_encode(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_encode(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Encode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_encode(&mut self, v: super::sp_steps_encode::EncodeStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Encode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_encode(&mut self) -> &mut super::sp_steps_encode::EncodeStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Encode(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Encode(super::sp_steps_encode::EncodeStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Encode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_encode(&mut self) -> super::sp_steps_encode::EncodeStep {
        if self.has_encode() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Encode(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_encode::EncodeStep::new()
        }
    }

    // .protos.steps.DecodeStep decode = 1003;

    pub fn decode(&self) -> &super::sp_steps_decode::DecodeStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Decode(ref v)) => v,
            _ => <super::sp_steps_decode::DecodeStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_decode(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_decode(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Decode(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_decode(&mut self, v: super::sp_steps_decode::DecodeStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Decode(v))
    }

    // Mutable pointer to the field.
    pub fn mut_decode(&mut self) -> &mut super::sp_steps_decode::DecodeStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Decode(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Decode(super::sp_steps_decode::DecodeStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Decode(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_decode(&mut self) -> super::sp_steps_decode::DecodeStep {
        if self.has_decode() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Decode(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_decode::DecodeStep::new()
        }
    }

    // .protos.steps.CustomStep custom = 1004;

    pub fn custom(&self) -> &super::sp_steps_custom::CustomStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Custom(ref v)) => v,
            _ => <super::sp_steps_custom::CustomStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_custom(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_custom(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Custom(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom(&mut self, v: super::sp_steps_custom::CustomStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Custom(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom(&mut self) -> &mut super::sp_steps_custom::CustomStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Custom(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Custom(super::sp_steps_custom::CustomStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Custom(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom(&mut self) -> super::sp_steps_custom::CustomStep {
        if self.has_custom() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Custom(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_custom::CustomStep::new()
        }
    }

    // .protos.steps.HttpRequestStep http_request = 1005;

    pub fn http_request(&self) -> &super::sp_steps_httprequest::HttpRequestStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::HttpRequest(ref v)) => v,
            _ => <super::sp_steps_httprequest::HttpRequestStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_http_request(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_http_request(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::HttpRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_request(&mut self, v: super::sp_steps_httprequest::HttpRequestStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::HttpRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_request(&mut self) -> &mut super::sp_steps_httprequest::HttpRequestStep {
        if let ::std::option::Option::Some(pipeline_step::Step::HttpRequest(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::HttpRequest(super::sp_steps_httprequest::HttpRequestStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::HttpRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_request(&mut self) -> super::sp_steps_httprequest::HttpRequestStep {
        if self.has_http_request() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::HttpRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_httprequest::HttpRequestStep::new()
        }
    }

    // .protos.steps.KVStep kv = 1006;

    pub fn kv(&self) -> &super::sp_steps_kv::KVStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Kv(ref v)) => v,
            _ => <super::sp_steps_kv::KVStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_kv(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_kv(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Kv(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kv(&mut self, v: super::sp_steps_kv::KVStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::Kv(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kv(&mut self) -> &mut super::sp_steps_kv::KVStep {
        if let ::std::option::Option::Some(pipeline_step::Step::Kv(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::Kv(super::sp_steps_kv::KVStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::Kv(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kv(&mut self) -> super::sp_steps_kv::KVStep {
        if self.has_kv() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::Kv(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_kv::KVStep::new()
        }
    }

    // .protos.steps.InferSchemaStep infer_schema = 1007;

    pub fn infer_schema(&self) -> &super::sp_steps_inferschema::InferSchemaStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::InferSchema(ref v)) => v,
            _ => <super::sp_steps_inferschema::InferSchemaStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_infer_schema(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_infer_schema(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::InferSchema(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_infer_schema(&mut self, v: super::sp_steps_inferschema::InferSchemaStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::InferSchema(v))
    }

    // Mutable pointer to the field.
    pub fn mut_infer_schema(&mut self) -> &mut super::sp_steps_inferschema::InferSchemaStep {
        if let ::std::option::Option::Some(pipeline_step::Step::InferSchema(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::InferSchema(super::sp_steps_inferschema::InferSchemaStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::InferSchema(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_infer_schema(&mut self) -> super::sp_steps_inferschema::InferSchemaStep {
        if self.has_infer_schema() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::InferSchema(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_inferschema::InferSchemaStep::new()
        }
    }

    // .protos.steps.ValidJSONStep valid_json = 1008;

    pub fn valid_json(&self) -> &super::sp_steps_valid_json::ValidJSONStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::ValidJson(ref v)) => v,
            _ => <super::sp_steps_valid_json::ValidJSONStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_valid_json(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_valid_json(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::ValidJson(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_valid_json(&mut self, v: super::sp_steps_valid_json::ValidJSONStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::ValidJson(v))
    }

    // Mutable pointer to the field.
    pub fn mut_valid_json(&mut self) -> &mut super::sp_steps_valid_json::ValidJSONStep {
        if let ::std::option::Option::Some(pipeline_step::Step::ValidJson(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::ValidJson(super::sp_steps_valid_json::ValidJSONStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::ValidJson(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_valid_json(&mut self) -> super::sp_steps_valid_json::ValidJSONStep {
        if self.has_valid_json() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::ValidJson(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_valid_json::ValidJSONStep::new()
        }
    }

    // .protos.steps.SchemaValidationStep schema_validation = 1009;

    pub fn schema_validation(&self) -> &super::sp_steps_schema_validation::SchemaValidationStep {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::SchemaValidation(ref v)) => v,
            _ => <super::sp_steps_schema_validation::SchemaValidationStep as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_schema_validation(&mut self) {
        self.step = ::std::option::Option::None;
    }

    pub fn has_schema_validation(&self) -> bool {
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::SchemaValidation(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_schema_validation(&mut self, v: super::sp_steps_schema_validation::SchemaValidationStep) {
        self.step = ::std::option::Option::Some(pipeline_step::Step::SchemaValidation(v))
    }

    // Mutable pointer to the field.
    pub fn mut_schema_validation(&mut self) -> &mut super::sp_steps_schema_validation::SchemaValidationStep {
        if let ::std::option::Option::Some(pipeline_step::Step::SchemaValidation(_)) = self.step {
        } else {
            self.step = ::std::option::Option::Some(pipeline_step::Step::SchemaValidation(super::sp_steps_schema_validation::SchemaValidationStep::new()));
        }
        match self.step {
            ::std::option::Option::Some(pipeline_step::Step::SchemaValidation(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_schema_validation(&mut self) -> super::sp_steps_schema_validation::SchemaValidationStep {
        if self.has_schema_validation() {
            match self.step.take() {
                ::std::option::Option::Some(pipeline_step::Step::SchemaValidation(v)) => v,
                _ => panic!(),
            }
        } else {
            super::sp_steps_schema_validation::SchemaValidationStep::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(18);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PipelineStep| { &m.name },
            |m: &mut PipelineStep| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PipelineStepConditions>(
            "on_true",
            |m: &PipelineStep| { &m.on_true },
            |m: &mut PipelineStep| { &mut m.on_true },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PipelineStepConditions>(
            "on_false",
            |m: &PipelineStep| { &m.on_false },
            |m: &mut PipelineStep| { &mut m.on_false },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dynamic",
            |m: &PipelineStep| { &m.dynamic },
            |m: &mut PipelineStep| { &mut m.dynamic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PipelineStepConditions>(
            "on_error",
            |m: &PipelineStep| { &m.on_error },
            |m: &mut PipelineStep| { &mut m.on_error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_detective::DetectiveStep>(
            "detective",
            PipelineStep::has_detective,
            PipelineStep::detective,
            PipelineStep::mut_detective,
            PipelineStep::set_detective,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_transform::TransformStep>(
            "transform",
            PipelineStep::has_transform,
            PipelineStep::transform,
            PipelineStep::mut_transform,
            PipelineStep::set_transform,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_encode::EncodeStep>(
            "encode",
            PipelineStep::has_encode,
            PipelineStep::encode,
            PipelineStep::mut_encode,
            PipelineStep::set_encode,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_decode::DecodeStep>(
            "decode",
            PipelineStep::has_decode,
            PipelineStep::decode,
            PipelineStep::mut_decode,
            PipelineStep::set_decode,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_custom::CustomStep>(
            "custom",
            PipelineStep::has_custom,
            PipelineStep::custom,
            PipelineStep::mut_custom,
            PipelineStep::set_custom,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_httprequest::HttpRequestStep>(
            "http_request",
            PipelineStep::has_http_request,
            PipelineStep::http_request,
            PipelineStep::mut_http_request,
            PipelineStep::set_http_request,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_kv::KVStep>(
            "kv",
            PipelineStep::has_kv,
            PipelineStep::kv,
            PipelineStep::mut_kv,
            PipelineStep::set_kv,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_inferschema::InferSchemaStep>(
            "infer_schema",
            PipelineStep::has_infer_schema,
            PipelineStep::infer_schema,
            PipelineStep::mut_infer_schema,
            PipelineStep::set_infer_schema,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_valid_json::ValidJSONStep>(
            "valid_json",
            PipelineStep::has_valid_json,
            PipelineStep::valid_json,
            PipelineStep::mut_valid_json,
            PipelineStep::set_valid_json,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::sp_steps_schema_validation::SchemaValidationStep>(
            "schema_validation",
            PipelineStep::has_schema_validation,
            PipelineStep::schema_validation,
            PipelineStep::mut_schema_validation,
            PipelineStep::set_schema_validation,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_wasm_id",
            |m: &PipelineStep| { &m._wasm_id },
            |m: &mut PipelineStep| { &mut m._wasm_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_wasm_bytes",
            |m: &PipelineStep| { &m._wasm_bytes },
            |m: &mut PipelineStep| { &mut m._wasm_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "_wasm_function",
            |m: &PipelineStep| { &m._wasm_function },
            |m: &mut PipelineStep| { &mut m._wasm_function },
        ));
        oneofs.push(pipeline_step::Step::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineStep>(
            "PipelineStep",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineStep {
    const NAME: &'static str = "PipelineStep";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.on_true)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.on_false)?;
                },
                32 => {
                    self.dynamic = is.read_bool()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.on_error)?;
                },
                8002 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Detective(is.read_message()?));
                },
                8010 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Transform(is.read_message()?));
                },
                8018 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Encode(is.read_message()?));
                },
                8026 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Decode(is.read_message()?));
                },
                8034 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Custom(is.read_message()?));
                },
                8042 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::HttpRequest(is.read_message()?));
                },
                8050 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::Kv(is.read_message()?));
                },
                8058 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::InferSchema(is.read_message()?));
                },
                8066 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::ValidJson(is.read_message()?));
                },
                8074 => {
                    self.step = ::std::option::Option::Some(pipeline_step::Step::SchemaValidation(is.read_message()?));
                },
                80002 => {
                    self._wasm_id = ::std::option::Option::Some(is.read_string()?);
                },
                80010 => {
                    self._wasm_bytes = ::std::option::Option::Some(is.read_bytes()?);
                },
                80018 => {
                    self._wasm_function = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(v) = self.on_true.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.on_false.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.dynamic != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.on_error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self._wasm_id.as_ref() {
            my_size += ::protobuf::rt::string_size(10000, &v);
        }
        if let Some(v) = self._wasm_bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(10001, &v);
        }
        if let Some(v) = self._wasm_function.as_ref() {
            my_size += ::protobuf::rt::string_size(10002, &v);
        }
        if let ::std::option::Option::Some(ref v) = self.step {
            match v {
                &pipeline_step::Step::Detective(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Transform(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Encode(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Decode(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Custom(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::HttpRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::Kv(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::InferSchema(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::ValidJson(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &pipeline_step::Step::SchemaValidation(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(v) = self.on_true.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.on_false.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if self.dynamic != false {
            os.write_bool(4, self.dynamic)?;
        }
        if let Some(v) = self.on_error.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self._wasm_id.as_ref() {
            os.write_string(10000, v)?;
        }
        if let Some(v) = self._wasm_bytes.as_ref() {
            os.write_bytes(10001, v)?;
        }
        if let Some(v) = self._wasm_function.as_ref() {
            os.write_string(10002, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.step {
            match v {
                &pipeline_step::Step::Detective(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1000, v, os)?;
                },
                &pipeline_step::Step::Transform(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1001, v, os)?;
                },
                &pipeline_step::Step::Encode(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1002, v, os)?;
                },
                &pipeline_step::Step::Decode(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1003, v, os)?;
                },
                &pipeline_step::Step::Custom(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1004, v, os)?;
                },
                &pipeline_step::Step::HttpRequest(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1005, v, os)?;
                },
                &pipeline_step::Step::Kv(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1006, v, os)?;
                },
                &pipeline_step::Step::InferSchema(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1007, v, os)?;
                },
                &pipeline_step::Step::ValidJson(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1008, v, os)?;
                },
                &pipeline_step::Step::SchemaValidation(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1009, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineStep {
        PipelineStep::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.on_true.clear();
        self.on_false.clear();
        self.dynamic = false;
        self.on_error.clear();
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self.step = ::std::option::Option::None;
        self._wasm_id = ::std::option::Option::None;
        self._wasm_bytes = ::std::option::Option::None;
        self._wasm_function = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineStep {
        static instance: PipelineStep = PipelineStep {
            name: ::std::string::String::new(),
            on_true: ::protobuf::MessageField::none(),
            on_false: ::protobuf::MessageField::none(),
            dynamic: false,
            on_error: ::protobuf::MessageField::none(),
            _wasm_id: ::std::option::Option::None,
            _wasm_bytes: ::std::option::Option::None,
            _wasm_function: ::std::option::Option::None,
            step: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PipelineStep {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineStep").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineStep {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineStep {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `PipelineStep`
pub mod pipeline_step {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.PipelineStep.step)
    pub enum Step {
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.detective)
        Detective(super::super::sp_steps_detective::DetectiveStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.transform)
        Transform(super::super::sp_steps_transform::TransformStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.encode)
        Encode(super::super::sp_steps_encode::EncodeStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.decode)
        Decode(super::super::sp_steps_decode::DecodeStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.custom)
        Custom(super::super::sp_steps_custom::CustomStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.http_request)
        HttpRequest(super::super::sp_steps_httprequest::HttpRequestStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.kv)
        Kv(super::super::sp_steps_kv::KVStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.infer_schema)
        InferSchema(super::super::sp_steps_inferschema::InferSchemaStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.valid_json)
        ValidJson(super::super::sp_steps_valid_json::ValidJSONStep),
        // @@protoc_insertion_point(oneof_field:protos.PipelineStep.schema_validation)
        SchemaValidation(super::super::sp_steps_schema_validation::SchemaValidationStep),
    }

    impl ::protobuf::Oneof for Step {
    }

    impl ::protobuf::OneofFull for Step {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::PipelineStep as ::protobuf::MessageFull>::descriptor().oneof_by_name("step").unwrap()).clone()
        }
    }

    impl Step {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Step>("step")
        }
    }
}

///  PipelineConfig is the structure used for storing individual pipeline configuration
///  under redis:streamdal_audience:$audienceStr (as JSON); it is also returned as
///  part of external.GetAllResponse.
// @@protoc_insertion_point(message:protos.PipelineConfig)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PipelineConfig {
    // message fields
    // @@protoc_insertion_point(field:protos.PipelineConfig.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // @@protoc_insertion_point(field:protos.PipelineConfig.paused)
    pub paused: bool,
    // @@protoc_insertion_point(field:protos.PipelineConfig.created_at_unix_ts_ns_utc)
    pub created_at_unix_ts_ns_utc: i64,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PipelineConfig.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineConfig {
    fn default() -> &'a PipelineConfig {
        <PipelineConfig as ::protobuf::Message>::default_instance()
    }
}

impl PipelineConfig {
    pub fn new() -> PipelineConfig {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &PipelineConfig| { &m.pipeline_id },
            |m: &mut PipelineConfig| { &mut m.pipeline_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "paused",
            |m: &PipelineConfig| { &m.paused },
            |m: &mut PipelineConfig| { &mut m.paused },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "created_at_unix_ts_ns_utc",
            |m: &PipelineConfig| { &m.created_at_unix_ts_ns_utc },
            |m: &mut PipelineConfig| { &mut m.created_at_unix_ts_ns_utc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineConfig>(
            "PipelineConfig",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineConfig {
    const NAME: &'static str = "PipelineConfig";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                16 => {
                    self.paused = is.read_bool()?;
                },
                24 => {
                    self.created_at_unix_ts_ns_utc = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        if self.paused != false {
            my_size += 1 + 1;
        }
        if self.created_at_unix_ts_ns_utc != 0 {
            my_size += ::protobuf::rt::int64_size(3, self.created_at_unix_ts_ns_utc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        if self.paused != false {
            os.write_bool(2, self.paused)?;
        }
        if self.created_at_unix_ts_ns_utc != 0 {
            os.write_int64(3, self.created_at_unix_ts_ns_utc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineConfig {
        PipelineConfig::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.paused = false;
        self.created_at_unix_ts_ns_utc = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineConfig {
        static instance: PipelineConfig = PipelineConfig {
            pipeline_id: ::std::string::String::new(),
            paused: false,
            created_at_unix_ts_ns_utc: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PipelineConfig {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineConfig").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineConfig {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Defines the ways in which a pipeline can be aborted
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protos.AbortCondition)
pub enum AbortCondition {
    // @@protoc_insertion_point(enum_value:protos.AbortCondition.ABORT_CONDITION_UNSET)
    ABORT_CONDITION_UNSET = 0,
    // @@protoc_insertion_point(enum_value:protos.AbortCondition.ABORT_CONDITION_ABORT_CURRENT)
    ABORT_CONDITION_ABORT_CURRENT = 1,
    // @@protoc_insertion_point(enum_value:protos.AbortCondition.ABORT_CONDITION_ABORT_ALL)
    ABORT_CONDITION_ABORT_ALL = 2,
}

impl ::protobuf::Enum for AbortCondition {
    const NAME: &'static str = "AbortCondition";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AbortCondition> {
        match value {
            0 => ::std::option::Option::Some(AbortCondition::ABORT_CONDITION_UNSET),
            1 => ::std::option::Option::Some(AbortCondition::ABORT_CONDITION_ABORT_CURRENT),
            2 => ::std::option::Option::Some(AbortCondition::ABORT_CONDITION_ABORT_ALL),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<AbortCondition> {
        match str {
            "ABORT_CONDITION_UNSET" => ::std::option::Option::Some(AbortCondition::ABORT_CONDITION_UNSET),
            "ABORT_CONDITION_ABORT_CURRENT" => ::std::option::Option::Some(AbortCondition::ABORT_CONDITION_ABORT_CURRENT),
            "ABORT_CONDITION_ABORT_ALL" => ::std::option::Option::Some(AbortCondition::ABORT_CONDITION_ABORT_ALL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [AbortCondition] = &[
        AbortCondition::ABORT_CONDITION_UNSET,
        AbortCondition::ABORT_CONDITION_ABORT_CURRENT,
        AbortCondition::ABORT_CONDITION_ABORT_ALL,
    ];
}

impl ::protobuf::EnumFull for AbortCondition {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("AbortCondition").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for AbortCondition {
    fn default() -> Self {
        AbortCondition::ABORT_CONDITION_UNSET
    }
}

impl AbortCondition {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<AbortCondition>("AbortCondition")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11sp_pipeline.proto\x12\x06protos\x1a\x0fsp_notify.proto\x1a\x1bstep\
    s/sp_steps_custom.proto\x1a\x1bsteps/sp_steps_decode.proto\x1a\x1esteps/\
    sp_steps_detective.proto\x1a\x1bsteps/sp_steps_encode.proto\x1a\x20steps\
    /sp_steps_httprequest.proto\x1a\x20steps/sp_steps_inferschema.proto\x1a\
    \x17steps/sp_steps_kv.proto\x1a&steps/sp_steps_schema_validation.proto\
    \x1a\x1esteps/sp_steps_transform.proto\x1a\x1fsteps/sp_steps_valid_json.\
    proto\"\xd5\x01\n\x08Pipeline\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12*\n\x05steps\x18\x03\
    \x20\x03(\x0b2\x14.protos.PipelineStepR\x05steps\x12N\n\x15_notification\
    _configs\x18\x04\x20\x03(\x0b2\x1a.protos.NotificationConfigR\x13Notific\
    ationConfigs\x12\x1d\n\x07_paused\x18\xe8\x07\x20\x01(\x08H\0R\x06Paused\
    \x88\x01\x01B\n\n\x08X_paused\"\xe5\x01\n\x16PipelineStepConditions\x12,\
    \n\x05abort\x18\x01\x20\x01(\x0e2\x16.protos.AbortConditionR\x05abort\
    \x12\x16\n\x06notify\x18\x02\x20\x01(\x08R\x06notify\x12H\n\x08metadata\
    \x18\x03\x20\x03(\x0b2,.protos.PipelineStepConditions.MetadataEntryR\x08\
    metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03k\
    ey\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xf6\x07\n\
    \x0cPipelineStep\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x127\n\
    \x07on_true\x18\x02\x20\x01(\x0b2\x1e.protos.PipelineStepConditionsR\x06\
    onTrue\x129\n\x08on_false\x18\x03\x20\x01(\x0b2\x1e.protos.PipelineStepC\
    onditionsR\x07onFalse\x12\x18\n\x07dynamic\x18\x04\x20\x01(\x08R\x07dyna\
    mic\x129\n\x08on_error\x18\x05\x20\x01(\x0b2\x1e.protos.PipelineStepCond\
    itionsR\x07onError\x12<\n\tdetective\x18\xe8\x07\x20\x01(\x0b2\x1b.proto\
    s.steps.DetectiveStepH\0R\tdetective\x12<\n\ttransform\x18\xe9\x07\x20\
    \x01(\x0b2\x1b.protos.steps.TransformStepH\0R\ttransform\x123\n\x06encod\
    e\x18\xea\x07\x20\x01(\x0b2\x18.protos.steps.EncodeStepH\0R\x06encode\
    \x123\n\x06decode\x18\xeb\x07\x20\x01(\x0b2\x18.protos.steps.DecodeStepH\
    \0R\x06decode\x123\n\x06custom\x18\xec\x07\x20\x01(\x0b2\x18.protos.step\
    s.CustomStepH\0R\x06custom\x12C\n\x0chttp_request\x18\xed\x07\x20\x01(\
    \x0b2\x1d.protos.steps.HttpRequestStepH\0R\x0bhttpRequest\x12'\n\x02kv\
    \x18\xee\x07\x20\x01(\x0b2\x14.protos.steps.KVStepH\0R\x02kv\x12C\n\x0ci\
    nfer_schema\x18\xef\x07\x20\x01(\x0b2\x1d.protos.steps.InferSchemaStepH\
    \0R\x0binferSchema\x12=\n\nvalid_json\x18\xf0\x07\x20\x01(\x0b2\x1b.prot\
    os.steps.ValidJSONStepH\0R\tvalidJson\x12R\n\x11schema_validation\x18\
    \xf1\x07\x20\x01(\x0b2\".protos.steps.SchemaValidationStepH\0R\x10schema\
    Validation\x12\x1e\n\x08_wasm_id\x18\x90N\x20\x01(\tH\x01R\x06WasmId\x88\
    \x01\x01\x12$\n\x0b_wasm_bytes\x18\x91N\x20\x01(\x0cH\x02R\tWasmBytes\
    \x88\x01\x01\x12*\n\x0e_wasm_function\x18\x92N\x20\x01(\tH\x03R\x0cWasmF\
    unction\x88\x01\x01B\x06\n\x04stepB\x0b\n\tX_wasm_idB\x0e\n\x0cX_wasm_by\
    tesB\x11\n\x0fX_wasm_function\"\x82\x01\n\x0ePipelineConfig\x12\x1f\n\
    \x0bpipeline_id\x18\x01\x20\x01(\tR\npipelineId\x12\x16\n\x06paused\x18\
    \x02\x20\x01(\x08R\x06paused\x127\n\x19created_at_unix_ts_ns_utc\x18\x03\
    \x20\x01(\x03R\x14createdAtUnixTsNsUtc*m\n\x0eAbortCondition\x12\x19\n\
    \x15ABORT_CONDITION_UNSET\x10\0\x12!\n\x1dABORT_CONDITION_ABORT_CURRENT\
    \x10\x01\x12\x1d\n\x19ABORT_CONDITION_ABORT_ALL\x10\x02B<Z:github.com/st\
    reamdal/streamdal/libs/protos/build/go/protosJ\xf7\x1f\n\x06\x12\x04\0\0\
    l\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\
    \n\t\n\x02\x03\0\x12\x03\x04\0\x19\n\t\n\x02\x03\x01\x12\x03\x05\0%\n\t\
    \n\x02\x03\x02\x12\x03\x06\0%\n\t\n\x02\x03\x03\x12\x03\x07\0(\n\t\n\x02\
    \x03\x04\x12\x03\x08\0%\n\t\n\x02\x03\x05\x12\x03\t\0*\n\t\n\x02\x03\x06\
    \x12\x03\n\0*\n\t\n\x02\x03\x07\x12\x03\x0b\0!\n\t\n\x02\x03\x08\x12\x03\
    \x0c\00\n\t\n\x02\x03\t\x12\x03\r\0(\n\t\n\x02\x03\n\x12\x03\x0e\0)\n\
    \x08\n\x01\x08\x12\x03\x10\0Q\n\t\n\x02\x08\x0b\x12\x03\x10\0Q\n\xc8\x01\
    \n\x02\x04\0\x12\x04\x15\0&\x01\x1a\xbb\x01\x20Pipeline\x20is\x20a\x20st\
    ructure\x20that\x20holds\x20one\x20or\x20more\x20pipeline\x20steps.\x20T\
    his\x20structure\n\x20is\x20intended\x20to\x20be\x20immutable;\x20client\
    s\x20are\x20expected\x20to\x20generate\x20WASMRequest's\n\x20that\x20con\
    tain\x20a\x20pipeline\x20step.\n\n\n\n\x03\x04\0\x01\x12\x03\x15\x08\x10\
    \n\x9f\x01\n\x04\x04\0\x02\0\x12\x03\x18\x02\x10\x1a\x91\x01\x20ID\x20sh\
    ould\x20NOT\x20be\x20set\x20by\x20external\x20gRPC\x20client\x20on\x20Cr\
    eatePipelineRequest\x20-\x20it\n\x20will\x20be\x20ignored;\x20it\x20_doe\
    s_\x20need\x20to\x20be\x20set\x20on\x20UpdatePipelineRequest.\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x18\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x18\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x18\x0e\x0f\n-\n\x04\
    \x04\0\x02\x01\x12\x03\x1b\x02\x12\x1a\x20\x20Friendly\x20name\x20for\
    \x20the\x20pipeline\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1b\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1b\t\r\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x1b\x10\x11\n+\n\x04\x04\0\x02\x02\x12\x03\x1e\x02\"\x1a\
    \x1e\x20One\x20or\x20more\x20steps\x20to\x20execute\n\n\x0c\n\x05\x04\0\
    \x02\x02\x04\x12\x03\x1e\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x1e\
    \x0b\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x1e\x18\x1d\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x1e\x20!\n\x98\x01\n\x04\x04\0\x02\x03\x12\
    \x03\"\x02?\x1aT\x20Notification\x20configs\x20for\x20this\x20pipeline.\
    \x20Only\x20filled\x20out\n\x20in\x20external\x20API\x20responses\n\"5\
    \x20protolint:disable:this\x20FIELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\
    \x04\0\x02\x03\x04\x12\x03\"\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\
    \"\x0b$\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\"%:\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\"=>\n\x91\x01\n\x04\x04\0\x02\x04\x12\x03%\x02\x1f\x1aM\
    \x20Indicates\x20whether\x20the\x20pipeline\x20is\x20paused\x20or\x20not\
    .\x20Used\x20internally\x20by\x20server.\n\"5\x20protolint:disable:this\
    \x20FIELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\
    %\x02\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03%\x0b\x0f\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03%\x10\x17\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03%\x1a\
    \x1e\nA\n\x02\x05\0\x12\x04)\0-\x01\x1a5\x20Defines\x20the\x20ways\x20in\
    \x20which\x20a\x20pipeline\x20can\x20be\x20aborted\n\n\n\n\x03\x05\0\x01\
    \x12\x03)\x05\x13\n\x0b\n\x04\x05\0\x02\0\x12\x03*\x02\x1c\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03*\x02\x17\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03*\
    \x1a\x1b\n\x0b\n\x04\x05\0\x02\x01\x12\x03+\x02$\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03+\x02\x1f\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03+\"#\n\
    \x0b\n\x04\x05\0\x02\x02\x12\x03,\x02\x20\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x03,\x02\x1b\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03,\x1e\x1f\n\xb2\
    \x01\n\x02\x04\x01\x12\x042\0;\x01\x1a\xa5\x01\x20Conditions\x20define\
    \x20how\x20the\x20SDK\x20should\x20handle\x20a\x20Wasm\x20response\x20in\
    \x20a\x20step.\n\x20Should\x20it\x20continue\x20executing\x20the\x20pipe\
    line,\x20should\x20it\x20abort,\x20should\x20it\x20notify\n\x20and\x20on\
    _error.\n\n\n\n\x03\x04\x01\x01\x12\x032\x08\x1e\n)\n\x04\x04\x01\x02\0\
    \x12\x034\x02\x1b\x1a\x1c\x20Should\x20we\x20abort\x20execution?\n\n\x0c\
    \n\x05\x04\x01\x02\0\x06\x12\x034\x02\x10\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x034\x11\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x034\x19\x1a\n0\n\
    \x04\x04\x01\x02\x01\x12\x037\x02\x12\x1a#\x20Should\x20we\x20trigger\
    \x20a\x20notification?\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x037\x02\
    \x06\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x037\x07\r\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x037\x10\x11\nW\n\x04\x04\x01\x02\x02\x12\x03:\x02#\x1a\
    J\x20Should\x20we\x20include\x20additional\x20metadata\x20that\x20SDK\
    \x20should\x20pass\x20back\x20to\x20user?\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x06\x12\x03:\x02\x15\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03:\x16\x1e\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x03:!\"\n=\n\x02\x04\x02\x12\x04>\0c\
    \x01\x1a1\x20A\x20pipeline\x20step\x20is\x20a\x20single\x20step\x20in\
    \x20a\x20pipeline.\n\n\n\n\x03\x04\x02\x01\x12\x03>\x08\x14\n)\n\x04\x04\
    \x02\x02\0\x12\x03@\x02\x12\x1a\x1c\x20Friendly\x20name\x20for\x20the\
    \x20step\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03@\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03@\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03@\
    \x10\x11\n[\n\x04\x04\x02\x02\x01\x12\x03C\x02%\x1aN\x20SDKs\x20should\
    \x20read\x20this\x20when\x20Wasm\x20returns\x20'true'\x20to\x20determine\
    \x20what\x20to\x20do\x20next.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03C\
    \x02\x18\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03C\x19\x20\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03C#$\n\\\n\x04\x04\x02\x02\x02\x12\x03F\x02&\
    \x1aO\x20SDKs\x20should\x20read\x20this\x20when\x20Wasm\x20returns\x20'f\
    alse'\x20to\x20determine\x20what\x20to\x20do\x20next.\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x06\x12\x03F\x02\x18\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\
    \x03F\x19!\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03F$%\n^\n\x04\x04\x02\
    \x02\x03\x12\x03I\x02\x13\x1aQ\x20Indicates\x20whether\x20to\x20use\x20t\
    he\x20results\x20from\x20a\x20previous\x20step\x20as\x20input\x20to\x20t\
    his\x20step\n\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03I\x02\x06\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03I\x07\x0e\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03I\x11\x12\n\\\n\x04\x04\x02\x02\x04\x12\x03L\x02&\x1aO\x20SD\
    Ks\x20should\x20read\x20this\x20when\x20Wasm\x20returns\x20'error'\x20to\
    \x20determine\x20what\x20to\x20do\x20next.\n\n\x0c\n\x05\x04\x02\x02\x04\
    \x06\x12\x03L\x02\x18\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03L\x19!\n\
    \x0c\n\x05\x04\x02\x02\x04\x03\x12\x03L$%\n\x0c\n\x04\x04\x02\x08\0\x12\
    \x04N\x02Y\x03\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03N\x08\x0c\n\x0b\n\
    \x04\x04\x02\x02\x05\x12\x03O\x04)\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\
    \x03O\x04\x17\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03O\x18!\n\x0c\n\x05\
    \x04\x02\x02\x05\x03\x12\x03O$(\n\x0b\n\x04\x04\x02\x02\x06\x12\x03P\x04\
    )\n\x0c\n\x05\x04\x02\x02\x06\x06\x12\x03P\x04\x17\n\x0c\n\x05\x04\x02\
    \x02\x06\x01\x12\x03P\x18!\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\x03P$(\n\
    \x0b\n\x04\x04\x02\x02\x07\x12\x03Q\x04#\n\x0c\n\x05\x04\x02\x02\x07\x06\
    \x12\x03Q\x04\x14\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03Q\x15\x1b\n\x0c\
    \n\x05\x04\x02\x02\x07\x03\x12\x03Q\x1e\"\n\x0b\n\x04\x04\x02\x02\x08\
    \x12\x03R\x04#\n\x0c\n\x05\x04\x02\x02\x08\x06\x12\x03R\x04\x14\n\x0c\n\
    \x05\x04\x02\x02\x08\x01\x12\x03R\x15\x1b\n\x0c\n\x05\x04\x02\x02\x08\
    \x03\x12\x03R\x1e\"\n\x0b\n\x04\x04\x02\x02\t\x12\x03S\x04#\n\x0c\n\x05\
    \x04\x02\x02\t\x06\x12\x03S\x04\x14\n\x0c\n\x05\x04\x02\x02\t\x01\x12\
    \x03S\x15\x1b\n\x0c\n\x05\x04\x02\x02\t\x03\x12\x03S\x1e\"\n\x0b\n\x04\
    \x04\x02\x02\n\x12\x03T\x04.\n\x0c\n\x05\x04\x02\x02\n\x06\x12\x03T\x04\
    \x19\n\x0c\n\x05\x04\x02\x02\n\x01\x12\x03T\x1a&\n\x0c\n\x05\x04\x02\x02\
    \n\x03\x12\x03T)-\n\x0b\n\x04\x04\x02\x02\x0b\x12\x03U\x04\x1b\n\x0c\n\
    \x05\x04\x02\x02\x0b\x06\x12\x03U\x04\x10\n\x0c\n\x05\x04\x02\x02\x0b\
    \x01\x12\x03U\x11\x13\n\x0c\n\x05\x04\x02\x02\x0b\x03\x12\x03U\x16\x1a\n\
    \x0b\n\x04\x04\x02\x02\x0c\x12\x03V\x04.\n\x0c\n\x05\x04\x02\x02\x0c\x06\
    \x12\x03V\x04\x19\n\x0c\n\x05\x04\x02\x02\x0c\x01\x12\x03V\x1a&\n\x0c\n\
    \x05\x04\x02\x02\x0c\x03\x12\x03V)-\n\x0b\n\x04\x04\x02\x02\r\x12\x03W\
    \x04*\n\x0c\n\x05\x04\x02\x02\r\x06\x12\x03W\x04\x17\n\x0c\n\x05\x04\x02\
    \x02\r\x01\x12\x03W\x18\"\n\x0c\n\x05\x04\x02\x02\r\x03\x12\x03W%)\n\x0b\
    \n\x04\x04\x02\x02\x0e\x12\x03X\x048\n\x0c\n\x05\x04\x02\x02\x0e\x06\x12\
    \x03X\x04\x1e\n\x0c\n\x05\x04\x02\x02\x0e\x01\x12\x03X\x1f0\n\x0c\n\x05\
    \x04\x02\x02\x0e\x03\x12\x03X37\n}\n\x04\x04\x02\x02\x0f\x12\x03\\\x02#\
    \x1a9\x20ID\x20is\x20a\x20uuid(sha256(_wasm_bytes))\x20that\x20is\x20set\
    \x20by\x20server\n\"5\x20protolint:disable:this\x20FIELD_NAMES_LOWER_SNA\
    KE_CASE\n\n\x0c\n\x05\x04\x02\x02\x0f\x04\x12\x03\\\x02\n\n\x0c\n\x05\
    \x04\x02\x02\x0f\x05\x12\x03\\\x0b\x11\n\x0c\n\x05\x04\x02\x02\x0f\x01\
    \x12\x03\\\x12\x1a\n\x0c\n\x05\x04\x02\x02\x0f\x03\x12\x03\\\x1d\"\ng\n\
    \x04\x04\x02\x02\x10\x12\x03_\x02%\x1a#\x20WASM\x20module\x20bytes\x20(s\
    et\x20by\x20server)\n\"5\x20protolint:disable:this\x20FIELD_NAMES_LOWER_\
    SNAKE_CASE\n\n\x0c\n\x05\x04\x02\x02\x10\x04\x12\x03_\x02\n\n\x0c\n\x05\
    \x04\x02\x02\x10\x05\x12\x03_\x0b\x10\n\x0c\n\x05\x04\x02\x02\x10\x01\
    \x12\x03_\x11\x1c\n\x0c\n\x05\x04\x02\x02\x10\x03\x12\x03_\x1f$\ns\n\x04\
    \x04\x02\x02\x11\x12\x03b\x02)\x1a/\x20WASM\x20function\x20name\x20to\
    \x20execute\x20(set\x20by\x20server)\n\"5\x20protolint:disable:this\x20F\
    IELD_NAMES_LOWER_SNAKE_CASE\n\n\x0c\n\x05\x04\x02\x02\x11\x04\x12\x03b\
    \x02\n\n\x0c\n\x05\x04\x02\x02\x11\x05\x12\x03b\x0b\x11\n\x0c\n\x05\x04\
    \x02\x02\x11\x01\x12\x03b\x12\x20\n\x0c\n\x05\x04\x02\x02\x11\x03\x12\
    \x03b#(\n\xd2\x01\n\x02\x04\x03\x12\x04h\0l\x01\x1a\xc5\x01\x20PipelineC\
    onfig\x20is\x20the\x20structure\x20used\x20for\x20storing\x20individual\
    \x20pipeline\x20configuration\n\x20under\x20redis:streamdal_audience:$au\
    dienceStr\x20(as\x20JSON);\x20it\x20is\x20also\x20returned\x20as\n\x20pa\
    rt\x20of\x20external.GetAllResponse.\n\n\n\n\x03\x04\x03\x01\x12\x03h\
    \x08\x16\n\x0b\n\x04\x04\x03\x02\0\x12\x03i\x02\x19\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03i\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03i\t\x14\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03i\x17\x18\n\x0b\n\x04\x04\x03\x02\
    \x01\x12\x03j\x02\x12\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03j\x02\x06\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03j\x07\r\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03j\x10\x11\n\x0b\n\x04\x04\x03\x02\x02\x12\x03k\x02&\n\
    \x0c\n\x05\x04\x03\x02\x02\x05\x12\x03k\x02\x07\n\x0c\n\x05\x04\x03\x02\
    \x02\x01\x12\x03k\x08!\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03k$%b\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(11);
            deps.push(super::sp_notify::file_descriptor().clone());
            deps.push(super::sp_steps_custom::file_descriptor().clone());
            deps.push(super::sp_steps_decode::file_descriptor().clone());
            deps.push(super::sp_steps_detective::file_descriptor().clone());
            deps.push(super::sp_steps_encode::file_descriptor().clone());
            deps.push(super::sp_steps_httprequest::file_descriptor().clone());
            deps.push(super::sp_steps_inferschema::file_descriptor().clone());
            deps.push(super::sp_steps_kv::file_descriptor().clone());
            deps.push(super::sp_steps_schema_validation::file_descriptor().clone());
            deps.push(super::sp_steps_transform::file_descriptor().clone());
            deps.push(super::sp_steps_valid_json::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Pipeline::generated_message_descriptor_data());
            messages.push(PipelineStepConditions::generated_message_descriptor_data());
            messages.push(PipelineStep::generated_message_descriptor_data());
            messages.push(PipelineConfig::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(AbortCondition::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
