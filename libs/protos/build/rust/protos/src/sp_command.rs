// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `sp_command.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  Command is used by streamdal server for sending commands to SDKs
// @@protoc_insertion_point(message:protos.Command)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Command {
    // message fields
    ///  Who is this command intended for?
    ///  NOTE: Some commands (such as KeepAliveCommand, KVCommand) do NOT use audience and will ignore it
    // @@protoc_insertion_point(field:protos.Command.audience)
    pub audience: ::protobuf::MessageField<super::sp_common::Audience>,
    // message oneof groups
    pub command: ::std::option::Option<command::Command>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.Command.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    // .protos.AttachPipelineCommand attach_pipeline = 100;

    pub fn attach_pipeline(&self) -> &AttachPipelineCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::AttachPipeline(ref v)) => v,
            _ => <AttachPipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_attach_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_attach_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::AttachPipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_attach_pipeline(&mut self, v: AttachPipelineCommand) {
        self.command = ::std::option::Option::Some(command::Command::AttachPipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_attach_pipeline(&mut self) -> &mut AttachPipelineCommand {
        if let ::std::option::Option::Some(command::Command::AttachPipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::AttachPipeline(AttachPipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::AttachPipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_attach_pipeline(&mut self) -> AttachPipelineCommand {
        if self.has_attach_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::AttachPipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            AttachPipelineCommand::new()
        }
    }

    // .protos.DetachPipelineCommand detach_pipeline = 101;

    pub fn detach_pipeline(&self) -> &DetachPipelineCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::DetachPipeline(ref v)) => v,
            _ => <DetachPipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_detach_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_detach_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::DetachPipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_detach_pipeline(&mut self, v: DetachPipelineCommand) {
        self.command = ::std::option::Option::Some(command::Command::DetachPipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_detach_pipeline(&mut self) -> &mut DetachPipelineCommand {
        if let ::std::option::Option::Some(command::Command::DetachPipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::DetachPipeline(DetachPipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::DetachPipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_detach_pipeline(&mut self) -> DetachPipelineCommand {
        if self.has_detach_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::DetachPipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            DetachPipelineCommand::new()
        }
    }

    // .protos.PausePipelineCommand pause_pipeline = 102;

    pub fn pause_pipeline(&self) -> &PausePipelineCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::PausePipeline(ref v)) => v,
            _ => <PausePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pause_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_pause_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::PausePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pause_pipeline(&mut self, v: PausePipelineCommand) {
        self.command = ::std::option::Option::Some(command::Command::PausePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pause_pipeline(&mut self) -> &mut PausePipelineCommand {
        if let ::std::option::Option::Some(command::Command::PausePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::PausePipeline(PausePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::PausePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pause_pipeline(&mut self) -> PausePipelineCommand {
        if self.has_pause_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::PausePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            PausePipelineCommand::new()
        }
    }

    // .protos.ResumePipelineCommand resume_pipeline = 103;

    pub fn resume_pipeline(&self) -> &ResumePipelineCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::ResumePipeline(ref v)) => v,
            _ => <ResumePipelineCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_resume_pipeline(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_resume_pipeline(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::ResumePipeline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resume_pipeline(&mut self, v: ResumePipelineCommand) {
        self.command = ::std::option::Option::Some(command::Command::ResumePipeline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resume_pipeline(&mut self) -> &mut ResumePipelineCommand {
        if let ::std::option::Option::Some(command::Command::ResumePipeline(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::ResumePipeline(ResumePipelineCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::ResumePipeline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resume_pipeline(&mut self) -> ResumePipelineCommand {
        if self.has_resume_pipeline() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::ResumePipeline(v)) => v,
                _ => panic!(),
            }
        } else {
            ResumePipelineCommand::new()
        }
    }

    // .protos.KeepAliveCommand keep_alive = 104;

    pub fn keep_alive(&self) -> &KeepAliveCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(ref v)) => v,
            _ => <KeepAliveCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_keep_alive(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_keep_alive(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_keep_alive(&mut self, v: KeepAliveCommand) {
        self.command = ::std::option::Option::Some(command::Command::KeepAlive(v))
    }

    // Mutable pointer to the field.
    pub fn mut_keep_alive(&mut self) -> &mut KeepAliveCommand {
        if let ::std::option::Option::Some(command::Command::KeepAlive(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::KeepAlive(KeepAliveCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::KeepAlive(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_keep_alive(&mut self) -> KeepAliveCommand {
        if self.has_keep_alive() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::KeepAlive(v)) => v,
                _ => panic!(),
            }
        } else {
            KeepAliveCommand::new()
        }
    }

    // .protos.KVCommand kv = 105;

    pub fn kv(&self) -> &KVCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(ref v)) => v,
            _ => <KVCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_kv(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_kv(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kv(&mut self, v: KVCommand) {
        self.command = ::std::option::Option::Some(command::Command::Kv(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kv(&mut self) -> &mut KVCommand {
        if let ::std::option::Option::Some(command::Command::Kv(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::Kv(KVCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::Kv(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kv(&mut self) -> KVCommand {
        if self.has_kv() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::Kv(v)) => v,
                _ => panic!(),
            }
        } else {
            KVCommand::new()
        }
    }

    // .protos.TailCommand tail = 106;

    pub fn tail(&self) -> &TailCommand {
        match self.command {
            ::std::option::Option::Some(command::Command::Tail(ref v)) => v,
            _ => <TailCommand as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_tail(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_tail(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::Tail(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tail(&mut self, v: TailCommand) {
        self.command = ::std::option::Option::Some(command::Command::Tail(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tail(&mut self) -> &mut TailCommand {
        if let ::std::option::Option::Some(command::Command::Tail(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::Tail(TailCommand::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::Tail(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tail(&mut self) -> TailCommand {
        if self.has_tail() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::Tail(v)) => v,
                _ => panic!(),
            }
        } else {
            TailCommand::new()
        }
    }

    // .protos.PipelineList pipeline_list = 107;

    pub fn pipeline_list(&self) -> &PipelineList {
        match self.command {
            ::std::option::Option::Some(command::Command::PipelineList(ref v)) => v,
            _ => <PipelineList as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_pipeline_list(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_pipeline_list(&self) -> bool {
        match self.command {
            ::std::option::Option::Some(command::Command::PipelineList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pipeline_list(&mut self, v: PipelineList) {
        self.command = ::std::option::Option::Some(command::Command::PipelineList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pipeline_list(&mut self) -> &mut PipelineList {
        if let ::std::option::Option::Some(command::Command::PipelineList(_)) = self.command {
        } else {
            self.command = ::std::option::Option::Some(command::Command::PipelineList(PipelineList::new()));
        }
        match self.command {
            ::std::option::Option::Some(command::Command::PipelineList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pipeline_list(&mut self) -> PipelineList {
        if self.has_pipeline_list() {
            match self.command.take() {
                ::std::option::Option::Some(command::Command::PipelineList(v)) => v,
                _ => panic!(),
            }
        } else {
            PipelineList::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::Audience>(
            "audience",
            |m: &Command| { &m.audience },
            |m: &mut Command| { &mut m.audience },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AttachPipelineCommand>(
            "attach_pipeline",
            Command::has_attach_pipeline,
            Command::attach_pipeline,
            Command::mut_attach_pipeline,
            Command::set_attach_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DetachPipelineCommand>(
            "detach_pipeline",
            Command::has_detach_pipeline,
            Command::detach_pipeline,
            Command::mut_detach_pipeline,
            Command::set_detach_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PausePipelineCommand>(
            "pause_pipeline",
            Command::has_pause_pipeline,
            Command::pause_pipeline,
            Command::mut_pause_pipeline,
            Command::set_pause_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ResumePipelineCommand>(
            "resume_pipeline",
            Command::has_resume_pipeline,
            Command::resume_pipeline,
            Command::mut_resume_pipeline,
            Command::set_resume_pipeline,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, KeepAliveCommand>(
            "keep_alive",
            Command::has_keep_alive,
            Command::keep_alive,
            Command::mut_keep_alive,
            Command::set_keep_alive,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, KVCommand>(
            "kv",
            Command::has_kv,
            Command::kv,
            Command::mut_kv,
            Command::set_kv,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TailCommand>(
            "tail",
            Command::has_tail,
            Command::tail,
            Command::mut_tail,
            Command::set_tail,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, PipelineList>(
            "pipeline_list",
            Command::has_pipeline_list,
            Command::pipeline_list,
            Command::mut_pipeline_list,
            Command::set_pipeline_list,
        ));
        oneofs.push(command::Command::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Command>(
            "Command",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Command {
    const NAME: &'static str = "Command";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.audience)?;
                },
                802 => {
                    self.command = ::std::option::Option::Some(command::Command::AttachPipeline(is.read_message()?));
                },
                810 => {
                    self.command = ::std::option::Option::Some(command::Command::DetachPipeline(is.read_message()?));
                },
                818 => {
                    self.command = ::std::option::Option::Some(command::Command::PausePipeline(is.read_message()?));
                },
                826 => {
                    self.command = ::std::option::Option::Some(command::Command::ResumePipeline(is.read_message()?));
                },
                834 => {
                    self.command = ::std::option::Option::Some(command::Command::KeepAlive(is.read_message()?));
                },
                842 => {
                    self.command = ::std::option::Option::Some(command::Command::Kv(is.read_message()?));
                },
                850 => {
                    self.command = ::std::option::Option::Some(command::Command::Tail(is.read_message()?));
                },
                858 => {
                    self.command = ::std::option::Option::Some(command::Command::PipelineList(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.audience.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command::Command::AttachPipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::DetachPipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::PausePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::ResumePipeline(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::KeepAlive(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::Kv(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::Tail(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::Command::PipelineList(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.audience.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.command {
            match v {
                &command::Command::AttachPipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(100, v, os)?;
                },
                &command::Command::DetachPipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(101, v, os)?;
                },
                &command::Command::PausePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(102, v, os)?;
                },
                &command::Command::ResumePipeline(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(103, v, os)?;
                },
                &command::Command::KeepAlive(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(104, v, os)?;
                },
                &command::Command::Kv(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(105, v, os)?;
                },
                &command::Command::Tail(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(106, v, os)?;
                },
                &command::Command::PipelineList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(107, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Command {
        Command::new()
    }

    fn clear(&mut self) {
        self.audience.clear();
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Command {
        static instance: Command = Command {
            audience: ::protobuf::MessageField::none(),
            command: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Command {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Command").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Command`
pub mod command {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:protos.Command.command)
    pub enum Command {
        // @@protoc_insertion_point(oneof_field:protos.Command.attach_pipeline)
        AttachPipeline(super::AttachPipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.detach_pipeline)
        DetachPipeline(super::DetachPipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.pause_pipeline)
        PausePipeline(super::PausePipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.resume_pipeline)
        ResumePipeline(super::ResumePipelineCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.keep_alive)
        KeepAlive(super::KeepAliveCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.kv)
        Kv(super::KVCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.tail)
        Tail(super::TailCommand),
        // @@protoc_insertion_point(oneof_field:protos.Command.pipeline_list)
        PipelineList(super::PipelineList),
    }

    impl ::protobuf::Oneof for Command {
    }

    impl ::protobuf::OneofFull for Command {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Command as ::protobuf::MessageFull>::descriptor().oneof_by_name("command").unwrap()).clone()
        }
    }

    impl Command {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Command>("command")
        }
    }
}

///  PipelineList is used to define a list of attached pipelines for an audience
///  The order and presence of pipeline IDs in this list is defined by the caller
///  of external.SetPipelines() a.k.a the frontend console.
///  Server's will receive this message via broadcast and send the correct pipelines to the SDKs
///  SDKs will receive this list and overwrite their current pipeline list with this new one.
// @@protoc_insertion_point(message:protos.PipelineList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PipelineList {
    // message fields
    // @@protoc_insertion_point(field:protos.PipelineList.pipelines)
    pub pipelines: ::std::vec::Vec<super::sp_pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PipelineList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PipelineList {
    fn default() -> &'a PipelineList {
        <PipelineList as ::protobuf::Message>::default_instance()
    }
}

impl PipelineList {
    pub fn new() -> PipelineList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "pipelines",
            |m: &PipelineList| { &m.pipelines },
            |m: &mut PipelineList| { &mut m.pipelines },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PipelineList>(
            "PipelineList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PipelineList {
    const NAME: &'static str = "PipelineList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipelines.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.pipelines {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.pipelines {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PipelineList {
        PipelineList::new()
    }

    fn clear(&mut self) {
        self.pipelines.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PipelineList {
        static instance: PipelineList = PipelineList {
            pipelines: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PipelineList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PipelineList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PipelineList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PipelineList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.AttachPipelineCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AttachPipelineCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.AttachPipelineCommand.pipeline)
    pub pipeline: ::protobuf::MessageField<super::sp_pipeline::Pipeline>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.AttachPipelineCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AttachPipelineCommand {
    fn default() -> &'a AttachPipelineCommand {
        <AttachPipelineCommand as ::protobuf::Message>::default_instance()
    }
}

impl AttachPipelineCommand {
    pub fn new() -> AttachPipelineCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_pipeline::Pipeline>(
            "pipeline",
            |m: &AttachPipelineCommand| { &m.pipeline },
            |m: &mut AttachPipelineCommand| { &mut m.pipeline },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AttachPipelineCommand>(
            "AttachPipelineCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AttachPipelineCommand {
    const NAME: &'static str = "AttachPipelineCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pipeline)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.pipeline.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.pipeline.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AttachPipelineCommand {
        AttachPipelineCommand::new()
    }

    fn clear(&mut self) {
        self.pipeline.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AttachPipelineCommand {
        static instance: AttachPipelineCommand = AttachPipelineCommand {
            pipeline: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AttachPipelineCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AttachPipelineCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AttachPipelineCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachPipelineCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.DetachPipelineCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DetachPipelineCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.DetachPipelineCommand.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.DetachPipelineCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DetachPipelineCommand {
    fn default() -> &'a DetachPipelineCommand {
        <DetachPipelineCommand as ::protobuf::Message>::default_instance()
    }
}

impl DetachPipelineCommand {
    pub fn new() -> DetachPipelineCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &DetachPipelineCommand| { &m.pipeline_id },
            |m: &mut DetachPipelineCommand| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DetachPipelineCommand>(
            "DetachPipelineCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DetachPipelineCommand {
    const NAME: &'static str = "DetachPipelineCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DetachPipelineCommand {
        DetachPipelineCommand::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DetachPipelineCommand {
        static instance: DetachPipelineCommand = DetachPipelineCommand {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DetachPipelineCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DetachPipelineCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DetachPipelineCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetachPipelineCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.PausePipelineCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PausePipelineCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.PausePipelineCommand.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.PausePipelineCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PausePipelineCommand {
    fn default() -> &'a PausePipelineCommand {
        <PausePipelineCommand as ::protobuf::Message>::default_instance()
    }
}

impl PausePipelineCommand {
    pub fn new() -> PausePipelineCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &PausePipelineCommand| { &m.pipeline_id },
            |m: &mut PausePipelineCommand| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PausePipelineCommand>(
            "PausePipelineCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PausePipelineCommand {
    const NAME: &'static str = "PausePipelineCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PausePipelineCommand {
        PausePipelineCommand::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PausePipelineCommand {
        static instance: PausePipelineCommand = PausePipelineCommand {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PausePipelineCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PausePipelineCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PausePipelineCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PausePipelineCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.ResumePipelineCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ResumePipelineCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.ResumePipelineCommand.pipeline_id)
    pub pipeline_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protos.ResumePipelineCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ResumePipelineCommand {
    fn default() -> &'a ResumePipelineCommand {
        <ResumePipelineCommand as ::protobuf::Message>::default_instance()
    }
}

impl ResumePipelineCommand {
    pub fn new() -> ResumePipelineCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pipeline_id",
            |m: &ResumePipelineCommand| { &m.pipeline_id },
            |m: &mut ResumePipelineCommand| { &mut m.pipeline_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResumePipelineCommand>(
            "ResumePipelineCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ResumePipelineCommand {
    const NAME: &'static str = "ResumePipelineCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pipeline_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pipeline_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pipeline_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pipeline_id.is_empty() {
            os.write_string(1, &self.pipeline_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ResumePipelineCommand {
        ResumePipelineCommand::new()
    }

    fn clear(&mut self) {
        self.pipeline_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ResumePipelineCommand {
        static instance: ResumePipelineCommand = ResumePipelineCommand {
            pipeline_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ResumePipelineCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ResumePipelineCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ResumePipelineCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResumePipelineCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.KeepAliveCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeepAliveCommand {
    // special fields
    // @@protoc_insertion_point(special_field:protos.KeepAliveCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeepAliveCommand {
    fn default() -> &'a KeepAliveCommand {
        <KeepAliveCommand as ::protobuf::Message>::default_instance()
    }
}

impl KeepAliveCommand {
    pub fn new() -> KeepAliveCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KeepAliveCommand>(
            "KeepAliveCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KeepAliveCommand {
    const NAME: &'static str = "KeepAliveCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeepAliveCommand {
        KeepAliveCommand::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeepAliveCommand {
        static instance: KeepAliveCommand = KeepAliveCommand {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KeepAliveCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KeepAliveCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KeepAliveCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeepAliveCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Sent by server on Register channel(s) to live SDKs
// @@protoc_insertion_point(message:protos.KVCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct KVCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.KVCommand.instructions)
    pub instructions: ::std::vec::Vec<super::sp_kv::KVInstruction>,
    ///  Create & Update specific setting that will cause the Create or Update to
    ///  work as an upsert.
    // @@protoc_insertion_point(field:protos.KVCommand.overwrite)
    pub overwrite: bool,
    // special fields
    // @@protoc_insertion_point(special_field:protos.KVCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KVCommand {
    fn default() -> &'a KVCommand {
        <KVCommand as ::protobuf::Message>::default_instance()
    }
}

impl KVCommand {
    pub fn new() -> KVCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "instructions",
            |m: &KVCommand| { &m.instructions },
            |m: &mut KVCommand| { &mut m.instructions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "overwrite",
            |m: &KVCommand| { &m.overwrite },
            |m: &mut KVCommand| { &mut m.overwrite },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KVCommand>(
            "KVCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KVCommand {
    const NAME: &'static str = "KVCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.instructions.push(is.read_message()?);
                },
                16 => {
                    self.overwrite = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.instructions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.overwrite != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.instructions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if self.overwrite != false {
            os.write_bool(2, self.overwrite)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KVCommand {
        KVCommand::new()
    }

    fn clear(&mut self) {
        self.instructions.clear();
        self.overwrite = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KVCommand {
        static instance: KVCommand = KVCommand {
            instructions: ::std::vec::Vec::new(),
            overwrite: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KVCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KVCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KVCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KVCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:protos.TailCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TailCommand {
    // message fields
    // @@protoc_insertion_point(field:protos.TailCommand.request)
    pub request: ::protobuf::MessageField<super::sp_common::TailRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:protos.TailCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TailCommand {
    fn default() -> &'a TailCommand {
        <TailCommand as ::protobuf::Message>::default_instance()
    }
}

impl TailCommand {
    pub fn new() -> TailCommand {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::sp_common::TailRequest>(
            "request",
            |m: &TailCommand| { &m.request },
            |m: &mut TailCommand| { &mut m.request },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TailCommand>(
            "TailCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TailCommand {
    const NAME: &'static str = "TailCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.request)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.request.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TailCommand {
        TailCommand::new()
    }

    fn clear(&mut self) {
        self.request.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TailCommand {
        static instance: TailCommand = TailCommand {
            request: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TailCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TailCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TailCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TailCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10sp_command.proto\x12\x06protos\x1a\x0fsp_common.proto\x1a\x0bsp_kv\
    .proto\x1a\x11sp_pipeline.proto\"\xb7\x04\n\x07Command\x12,\n\x08audienc\
    e\x18\x01\x20\x01(\x0b2\x10.protos.AudienceR\x08audience\x12L\n\x0fattac\
    h_pipeline\x18d\x20\x01(\x0b2\x1d.protos.AttachPipelineCommandH\0R\x0eat\
    tachPipelineB\x02\x18\x01\x12L\n\x0fdetach_pipeline\x18e\x20\x01(\x0b2\
    \x1d.protos.DetachPipelineCommandH\0R\x0edetachPipelineB\x02\x18\x01\x12\
    E\n\x0epause_pipeline\x18f\x20\x01(\x0b2\x1c.protos.PausePipelineCommand\
    H\0R\rpausePipeline\x12H\n\x0fresume_pipeline\x18g\x20\x01(\x0b2\x1d.pro\
    tos.ResumePipelineCommandH\0R\x0eresumePipeline\x129\n\nkeep_alive\x18h\
    \x20\x01(\x0b2\x18.protos.KeepAliveCommandH\0R\tkeepAlive\x12#\n\x02kv\
    \x18i\x20\x01(\x0b2\x11.protos.KVCommandH\0R\x02kv\x12)\n\x04tail\x18j\
    \x20\x01(\x0b2\x13.protos.TailCommandH\0R\x04tail\x12;\n\rpipeline_list\
    \x18k\x20\x01(\x0b2\x14.protos.PipelineListH\0R\x0cpipelineListB\t\n\x07\
    command\">\n\x0cPipelineList\x12.\n\tpipelines\x18\x01\x20\x03(\x0b2\x10\
    .protos.PipelineR\tpipelines\"E\n\x15AttachPipelineCommand\x12,\n\x08pip\
    eline\x18\x01\x20\x01(\x0b2\x10.protos.PipelineR\x08pipeline\"8\n\x15Det\
    achPipelineCommand\x12\x1f\n\x0bpipeline_id\x18\x01\x20\x01(\tR\npipelin\
    eId\"7\n\x14PausePipelineCommand\x12\x1f\n\x0bpipeline_id\x18\x01\x20\
    \x01(\tR\npipelineId\"8\n\x15ResumePipelineCommand\x12\x1f\n\x0bpipeline\
    _id\x18\x01\x20\x01(\tR\npipelineId\"\x12\n\x10KeepAliveCommand\"d\n\tKV\
    Command\x129\n\x0cinstructions\x18\x01\x20\x03(\x0b2\x15.protos.KVInstru\
    ctionR\x0cinstructions\x12\x1c\n\toverwrite\x18\x02\x20\x01(\x08R\toverw\
    rite\"<\n\x0bTailCommand\x12-\n\x07request\x18\x02\x20\x01(\x0b2\x13.pro\
    tos.TailRequestR\x07requestB<Z:github.com/streamdal/streamdal/libs/proto\
    s/build/go/protosJ\x8c\x13\n\x06\x12\x04\0\0O\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0f\n\t\n\x02\x03\0\x12\x03\
    \x04\0\x19\n\t\n\x02\x03\x01\x12\x03\x05\0\x15\n\t\n\x02\x03\x02\x12\x03\
    \x06\0\x1b\n\x08\n\x01\x08\x12\x03\x08\0Q\n\t\n\x02\x08\x0b\x12\x03\x08\
    \0Q\nN\n\x02\x04\0\x12\x04\x0b\0%\x01\x1aB\x20Command\x20is\x20used\x20b\
    y\x20streamdal\x20server\x20for\x20sending\x20commands\x20to\x20SDKs\n\n\
    \n\n\x03\x04\0\x01\x12\x03\x0b\x08\x0f\n\x93\x01\n\x04\x04\0\x02\0\x12\
    \x03\x0e\x02\x1f\x1a\x85\x01\x20Who\x20is\x20this\x20command\x20intended\
    \x20for?\n\x20NOTE:\x20Some\x20commands\x20(such\x20as\x20KeepAliveComma\
    nd,\x20KVCommand)\x20do\x20NOT\x20use\x20audience\x20and\x20will\x20igno\
    re\x20it\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\x02\x11\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0e\x12\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0e\x1d\x1e\n\x0c\n\x04\x04\0\x08\0\x12\x04\x10\x02$\x03\n\x0c\n\x05\
    \x04\0\x08\0\x01\x12\x03\x10\x08\x0f\n<\n\x04\x04\0\x02\x01\x12\x03\x12\
    \x04B\x1a/\x20Attaching\x20has\x20been\x20superseded\x20by\x20PipelineLi\
    st\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x12\x04\x19\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x12\x1a)\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x12,\
    /\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\x120A\n\r\n\x06\x04\0\x02\x01\
    \x08\x03\x12\x03\x121@\n<\n\x04\x04\0\x02\x02\x12\x03\x15\x04B\x1a/\x20D\
    etaching\x20has\x20been\x20superseded\x20by\x20PipelineList\n\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\x15\x04\x19\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x15\x1a)\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x15,/\n\x0c\n\
    \x05\x04\0\x02\x02\x08\x12\x03\x150A\n\r\n\x06\x04\0\x02\x02\x08\x03\x12\
    \x03\x151@\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x17\x04.\n\x0c\n\x05\x04\0\
    \x02\x03\x06\x12\x03\x17\x04\x18\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \x17\x19'\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x17*-\n\x0b\n\x04\x04\0\
    \x02\x04\x12\x03\x18\x040\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x18\x04\
    \x19\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x18\x1a)\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x03\x18,/\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x19\x04&\n\
    \x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x19\x04\x14\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x19\x15\x1f\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x19\"\
    %\nd\n\x04\x04\0\x02\x06\x12\x03\x1d\x04\x17\x1aW\x20Server\x20will\x20e\
    mit\x20this\x20when\x20a\x20user\x20makes\x20changes\x20to\x20the\x20KV\
    \x20store\n\x20via\x20the\x20KV\x20HTTP\x20API.\n\n\x0c\n\x05\x04\0\x02\
    \x06\x06\x12\x03\x1d\x04\r\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x1d\x0e\
    \x10\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x1d\x13\x16\nn\n\x04\x04\0\
    \x02\x07\x12\x03!\x04\x1b\x1aa\x20Emitted\x20by\x20server\x20when\x20a\
    \x20user\x20makes\x20a\x20Tail()\x20call\n\x20Consumed\x20by\x20all\x20s\
    erver\x20instances\x20and\x20by\x20SDKs\n\n\x0c\n\x05\x04\0\x02\x07\x06\
    \x12\x03!\x04\x0f\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03!\x10\x14\n\x0c\n\
    \x05\x04\0\x02\x07\x03\x12\x03!\x17\x1a\n\x0b\n\x04\x04\0\x02\x08\x12\
    \x03#\x04%\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03#\x04\x10\n\x0c\n\x05\
    \x04\0\x02\x08\x01\x12\x03#\x11\x1e\n\x0c\n\x05\x04\0\x02\x08\x03\x12\
    \x03#!$\n\x97\x03\n\x02\x04\x01\x12\x04,\0.\x01\x1a\x8a\x03\x20PipelineL\
    ist\x20is\x20used\x20to\x20define\x20a\x20list\x20of\x20attached\x20pipe\
    lines\x20for\x20an\x20audience\n\x20The\x20order\x20and\x20presence\x20o\
    f\x20pipeline\x20IDs\x20in\x20this\x20list\x20is\x20defined\x20by\x20the\
    \x20caller\n\x20of\x20external.SetPipelines()\x20a.k.a\x20the\x20fronten\
    d\x20console.\n\x20Server's\x20will\x20receive\x20this\x20message\x20via\
    \x20broadcast\x20and\x20send\x20the\x20correct\x20pipelines\x20to\x20the\
    \x20SDKs\n\x20SDKs\x20will\x20receive\x20this\x20list\x20and\x20overwrit\
    e\x20their\x20current\x20pipeline\x20list\x20with\x20this\x20new\x20one.\
    \n\n\n\n\x03\x04\x01\x01\x12\x03,\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03-\x02)\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03-\x02\n\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03-\x0b\x1a\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03-\
    \x1b$\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03-'(\n\n\n\x02\x04\x02\x12\x04\
    0\02\x01\n\n\n\x03\x04\x02\x01\x12\x030\x08\x1d\n\x0b\n\x04\x04\x02\x02\
    \0\x12\x031\x02\x1f\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x031\x02\x11\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x031\x12\x1a\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x031\x1d\x1e\n\n\n\x02\x04\x03\x12\x044\06\x01\n\n\n\x03\x04\x03\
    \x01\x12\x034\x08\x1d\n\x0b\n\x04\x04\x03\x02\0\x12\x035\x02\x19\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x035\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x035\t\x14\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x035\x17\x18\n\n\n\x02\
    \x04\x04\x12\x048\0:\x01\n\n\n\x03\x04\x04\x01\x12\x038\x08\x1c\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x039\x02\x19\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x039\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x039\t\x14\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x039\x17\x18\n\n\n\x02\x04\x05\x12\x04<\0>\x01\n\
    \n\n\x03\x04\x05\x01\x12\x03<\x08\x1d\n\x0b\n\x04\x04\x05\x02\0\x12\x03=\
    \x02\x19\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03=\x02\x08\n\x0c\n\x05\x04\
    \x05\x02\0\x01\x12\x03=\t\x14\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03=\x17\
    \x18\nD\n\x02\x04\x06\x12\x04@\0B\x01\"8\x20Nothing\x20needed\x20in\x20h\
    ere,\x20just\x20a\x20ping\x20from\x20server\x20to\x20SDK\n\n\n\n\x03\x04\
    \x06\x01\x12\x03@\x08\x18\n@\n\x02\x04\x07\x12\x04E\0K\x01\x1a4\x20Sent\
    \x20by\x20server\x20on\x20Register\x20channel(s)\x20to\x20live\x20SDKs\n\
    \n\n\n\x03\x04\x07\x01\x12\x03E\x08\x11\n\x0b\n\x04\x04\x07\x02\0\x12\
    \x03F\x021\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03F\x02\n\n\x0c\n\x05\x04\
    \x07\x02\0\x06\x12\x03F\x0b\x1f\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03F\
    \x20,\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03F/0\nk\n\x04\x04\x07\x02\x01\
    \x12\x03J\x02\x15\x1a^\x20Create\x20&\x20Update\x20specific\x20setting\
    \x20that\x20will\x20cause\x20the\x20Create\x20or\x20Update\x20to\n\x20wo\
    rk\x20as\x20an\x20upsert.\n\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03J\x02\
    \x06\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03J\x07\x10\n\x0c\n\x05\x04\
    \x07\x02\x01\x03\x12\x03J\x13\x14\n\n\n\x02\x04\x08\x12\x04M\0O\x01\n\n\
    \n\x03\x04\x08\x01\x12\x03M\x08\x13\n\x0b\n\x04\x04\x08\x02\0\x12\x03N\
    \x02\x1a\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03N\x02\r\n\x0c\n\x05\x04\
    \x08\x02\0\x01\x12\x03N\x0e\x15\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03N\
    \x18\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::sp_common::file_descriptor().clone());
            deps.push(super::sp_kv::file_descriptor().clone());
            deps.push(super::sp_pipeline::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(Command::generated_message_descriptor_data());
            messages.push(PipelineList::generated_message_descriptor_data());
            messages.push(AttachPipelineCommand::generated_message_descriptor_data());
            messages.push(DetachPipelineCommand::generated_message_descriptor_data());
            messages.push(PausePipelineCommand::generated_message_descriptor_data());
            messages.push(ResumePipelineCommand::generated_message_descriptor_data());
            messages.push(KeepAliveCommand::generated_message_descriptor_data());
            messages.push(KVCommand::generated_message_descriptor_data());
            messages.push(TailCommand::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
